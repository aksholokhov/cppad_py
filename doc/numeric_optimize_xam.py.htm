<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Example Using Scipy trust-constr Optimization Method</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Example Using Scipy trust-constr Optimization Method">
<meta name="keywords" id="keywords" content=" example using scipy trust-constr optimization method reference problem trust_constr source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_numeric_optimize_xam.py_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="numeric_xam.htm" target="_top">Prev</a>
</td><td><a href="numeric_ode_runge_xam.py.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>numeric_xam</option>
<option>numeric_optimize_xam.py</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_py_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_numeric_xam_htm.js'></script>
</td>
<td>numeric_optimize_xam.py</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>Example Using Scipy trust-constr Optimization Method</big></big></b></center>

<br><a href="numeric_optimize_xam.py.htm#Reference" target="_top">Reference</a>
<br><a href="numeric_optimize_xam.py.htm#Problem" target="_top">Problem</a>
<br><a href="numeric_optimize_xam.py.htm#trust_constr" target="_top">trust_constr</a>
<br><a href="numeric_optimize_xam.py.htm#Source Code" target="_top">Source&nbsp;Code</a>
<br><small>@(@
\newcommand{\W}[1]{{\; #1 \;}}
@)@</small><br>
<b><big><a name="Reference" id="Reference">Reference</a></big></b>
<br>
This problem comes form the
<a href="https://coin-or.github.io/Ipopt/INTERFACES.html" target="_top"><span style='white-space: nowrap'>Interfaces</span></a>

section of the Ipopt documentation.

<br>
<br>
<b><big><a name="Problem" id="Problem">Problem</a></big></b>

<br>
<small>@[@

\begin{array}{cr}
	{\rm minimize}   & x_0 x_3 ( x_0 + x_1 + x_2 ) + x_2   \\
	{\rm subject to} &             x_0 x_1 x_2 x_3 \geq 25 \\
                   & x_0^2 + x_1^2 + x_2^2 + x_3^2 = 40  \\
                   &                    1 \leq x \leq 5
\end{array}

@]@</small>with the starting point <small>@(@
x = (1, 5, 5, 1)
@)@</small>.
The optimal value for <small>@(@
x
@)@</small> is
<small>@[@

	(1.00000000 \W{,} 4.74299963 \W{,} 3.82114998 \W{,} 1.37940829)

@]@</small>

<br>
<br>
<b><big><a name="trust_constr" id="trust_constr">trust_constr</a></big></b>
<br>
This is one of the
<a href="https://docs.scipy.org/doc/scipy/reference/optimize.html" target="_top"><span style='white-space: nowrap'>scipy.optimize</span></a>

methods.

<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>

<pre><tt>
<b><font color="#0000FF">def</font></b> <b><font color="#000000">numeric_optimize_xam</font></b><font color="#990000">()</font> <font color="#990000">:</font>
     <i><font color="#9A1900">#</font></i>
     <b><font color="#000080">import</font></b> numpy
     <b><font color="#000080">import</font></b> cppad_py
     <b><font color="#000080">import</font></b> scipy<font color="#990000">.</font>optimize
     <i><font color="#9A1900">#</font></i>
     ok <font color="#990000">=</font> True
     <i><font color="#9A1900">#</font></i>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">a_objective</font></b><font color="#990000">(</font>ax<font color="#990000">)</font>  <font color="#990000">:</font>
          <b><font color="#0000FF">return</font></b> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">*</font> ax<font color="#990000">[</font><font color="#993399">3</font><font color="#990000">]</font> <font color="#990000">*</font> <font color="#990000">(</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> ax<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">+</font> ax<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font> <font color="#990000">)</font> <font color="#990000">+</font> ax<font color="#990000">[</font><font color="#993399">2</font><font color="#990000">]</font>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">a_constraint</font></b><font color="#990000">(</font>ax<font color="#990000">)</font> <font color="#990000">:</font>
          <b><font color="#0000FF">return</font></b> <font color="#990000">[</font> numpy<font color="#990000">.</font><b><font color="#000000">prod</font></b><font color="#990000">(</font>ax<font color="#990000">),</font> numpy<font color="#990000">.</font><b><font color="#000000">sum</font></b><font color="#990000">(</font> ax <font color="#990000">*</font> ax<font color="#990000">)</font> <font color="#990000">]</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># objective_ad</font></i>
     x <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">array</font></b><font color="#990000">(</font> <font color="#990000">[</font> <font color="#993399">1.0</font><font color="#990000">,</font> <font color="#993399">2.0</font><font color="#990000">,</font> <font color="#993399">3.0</font><font color="#990000">,</font> <font color="#993399">4.0</font> <font color="#990000">]</font> <font color="#990000">)</font>
     ax <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">independent</font></b><font color="#990000">(</font>x<font color="#990000">)</font>
     ay <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">array</font></b><font color="#990000">(</font> <font color="#990000">[</font><b><font color="#000000">a_objective</font></b><font color="#990000">(</font>ax<font color="#990000">)]</font> <font color="#990000">)</font>
     objective_ad <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">d_fun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># constraint_ad</font></i>
     ax <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">independent</font></b><font color="#990000">(</font>x<font color="#990000">)</font>
     ay <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">array</font></b><font color="#990000">(</font> <b><font color="#000000">a_constraint</font></b><font color="#990000">(</font>ax<font color="#990000">)</font> <font color="#990000">)</font>
     constraint_ad <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">d_fun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># objective: fun, jac, hes</font></i>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">objective_fun</font></b><font color="#990000">(</font>x<font color="#990000">)</font> <font color="#990000">:</font>
          <b><font color="#0000FF">return</font></b> objective_ad<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">)</font>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">objective_jac</font></b><font color="#990000">(</font>x<font color="#990000">)</font> <font color="#990000">:</font>
          <i><font color="#9A1900"># Jacobian as a matrix</font></i>
          J <font color="#990000">=</font> objective_ad<font color="#990000">.</font><b><font color="#000000">jacobian</font></b><font color="#990000">(</font>x<font color="#990000">)</font>
          <i><font color="#9A1900"># change to a vector</font></i>
          <b><font color="#0000FF">return</font></b> numpy<font color="#990000">.</font><b><font color="#000000">reshape</font></b><font color="#990000">(</font>J<font color="#990000">,</font> x<font color="#990000">.</font>size<font color="#990000">)</font>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">objective_hes</font></b><font color="#990000">(</font>x<font color="#990000">)</font> <font color="#990000">:</font>
          w <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">array</font></b><font color="#990000">(</font> <font color="#990000">[</font> <font color="#993399">1.0</font> <font color="#990000">]</font> <font color="#990000">)</font>
          H <font color="#990000">=</font> objective_ad<font color="#990000">.</font><b><font color="#000000">hessian</font></b><font color="#990000">(</font>x<font color="#990000">,</font> w<font color="#990000">)</font>
          <b><font color="#0000FF">return</font></b> H
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># constraint: fun, jac, hes</font></i>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">constraint_fun</font></b><font color="#990000">(</font>x<font color="#990000">)</font> <font color="#990000">:</font>
          <b><font color="#0000FF">return</font></b> constraint_ad<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">)</font>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">constraint_jac</font></b><font color="#990000">(</font>x<font color="#990000">)</font> <font color="#990000">:</font>
          <i><font color="#9A1900"># Jacobian as a matrix</font></i>
          J <font color="#990000">=</font> constraint_ad<font color="#990000">.</font><b><font color="#000000">jacobian</font></b><font color="#990000">(</font>x<font color="#990000">)</font>
          <b><font color="#0000FF">return</font></b> J
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">constraint_hes</font></b><font color="#990000">(</font>x<font color="#990000">,</font> v<font color="#990000">)</font> <font color="#990000">:</font>
          H <font color="#990000">=</font> constraint_ad<font color="#990000">.</font><b><font color="#000000">hessian</font></b><font color="#990000">(</font>x<font color="#990000">,</font> v<font color="#990000">)</font>
          <b><font color="#0000FF">return</font></b> H
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># constraints</font></i>
     lower_bound <font color="#990000">=</font> <font color="#990000">[</font>      <font color="#993399">25.0</font><font color="#990000">,</font> <font color="#993399">40.0</font> <font color="#990000">]</font>
     upper_bound <font color="#990000">=</font> <font color="#990000">[</font> numpy<font color="#990000">.</font>inf<font color="#990000">,</font> <font color="#993399">40.0</font> <font color="#990000">]</font>
     nonlinear_constraint <font color="#990000">=</font> scipy<font color="#990000">.</font>optimize<font color="#990000">.</font><b><font color="#000000">NonlinearConstraint</font></b><font color="#990000">(</font>
          constraint_fun<font color="#990000">,</font>
          lower_bound<font color="#990000">,</font>
          upper_bound<font color="#990000">,</font>
          jac           <font color="#990000">=</font> constraint_jac<font color="#990000">,</font>
          hess          <font color="#990000">=</font> constraint_hes<font color="#990000">,</font>
          keep_feasible <font color="#990000">=</font> False
     <font color="#990000">)</font>
     constraints       <font color="#990000">=</font> <font color="#990000">[</font>nonlinear_constraint<font color="#990000">]</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># bounds</font></i>
     lower_bound <font color="#990000">=</font> <font color="#993399">4</font> <font color="#990000">*</font> <font color="#990000">[</font> <font color="#993399">1.0</font> <font color="#990000">]</font>
     upper_bound <font color="#990000">=</font> <font color="#993399">4</font> <font color="#990000">*</font> <font color="#990000">[</font> <font color="#993399">5.0</font> <font color="#990000">]</font>
     bounds <font color="#990000">=</font> scipy<font color="#990000">.</font>optimize<font color="#990000">.</font><b><font color="#000000">Bounds</font></b><font color="#990000">(</font>
          lower_bound<font color="#990000">,</font>
          upper_bound<font color="#990000">,</font>
          keep_feasible <font color="#990000">=</font> False
     <font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># start_point</font></i>
     start_point <font color="#990000">=</font> <font color="#990000">[</font> <font color="#993399">1.0</font><font color="#990000">,</font> <font color="#993399">5.0</font><font color="#990000">,</font> <font color="#993399">5.0</font><font color="#990000">,</font> <font color="#993399">1.0</font> <font color="#990000">]</font>
     <i><font color="#9A1900">#</font></i>
     options <font color="#990000">=</font> <font color="#990000">{</font>
                               <font color="#FF0000">'gtol'</font> <font color="#990000">:</font> <font color="#993399">1e-8</font><font color="#990000">,</font>
                               <font color="#FF0000">'xtol'</font> <font color="#990000">:</font> <font color="#993399">1e-8</font><font color="#990000">,</font>
                        <font color="#FF0000">'barrier_tol'</font> <font color="#990000">:</font> <font color="#993399">1e-8</font><font color="#990000">,</font>
                  <font color="#FF0000">'initial_tr_radius'</font> <font color="#990000">:</font> <font color="#993399">1.0</font><font color="#990000">,</font>
             <font color="#FF0000">'initial_constr_penalty'</font> <font color="#990000">:</font> <font color="#993399">1.0</font><font color="#990000">,</font>
          <font color="#FF0000">'initial_barrier_tolerance'</font> <font color="#990000">:</font> <font color="#993399">0.1</font><font color="#990000">,</font>
          <font color="#FF0000">'initial_barrier_parameter'</font> <font color="#990000">:</font> <font color="#993399">0.1</font><font color="#990000">,</font>
               <font color="#FF0000">'factorization_method'</font> <font color="#990000">:</font> None<font color="#990000">,</font>
               <font color="#FF0000">'finite_diff_rel_step'</font> <font color="#990000">:</font> None<font color="#990000">,</font>
                            <font color="#FF0000">'maxiter'</font> <font color="#990000">:</font> <font color="#993399">50</font><font color="#990000">,</font>
                            <font color="#FF0000">'verbose'</font> <font color="#990000">:</font> <font color="#993399">0</font><font color="#990000">,</font>
     <font color="#990000">}</font>
     <i><font color="#9A1900">#</font></i>
     result <font color="#990000">=</font> scipy<font color="#990000">.</font>optimize<font color="#990000">.</font><b><font color="#000000">minimize</font></b><font color="#990000">(</font>
          objective_fun<font color="#990000">,</font>
          start_point<font color="#990000">,</font>
          method      <font color="#990000">=</font> <font color="#FF0000">'trust-constr'</font><font color="#990000">,</font>
          jac         <font color="#990000">=</font> objective_jac<font color="#990000">,</font>
          hess        <font color="#990000">=</font> objective_hes<font color="#990000">,</font>
          constraints <font color="#990000">=</font> constraints<font color="#990000">,</font>
          options     <font color="#990000">=</font> options<font color="#990000">,</font>
          bounds      <font color="#990000">=</font> bounds<font color="#990000">,</font>
     <font color="#990000">)</font>
     ok <font color="#990000">=</font> ok <b><font color="#0000FF">and</font></b> result<font color="#990000">.</font>success
     <i><font color="#9A1900">#</font></i>
     optimal_point <font color="#990000">=</font> result<font color="#990000">.</font>x
     check         <font color="#990000">=</font> <font color="#990000">[</font> <font color="#993399">1.00000000</font><font color="#990000">,</font> <font color="#993399">4.74299963</font><font color="#990000">,</font> <font color="#993399">3.82114998</font><font color="#990000">,</font> <font color="#993399">1.37940829</font> <font color="#990000">]</font>
     rel_error     <font color="#990000">=</font> optimal_point <font color="#990000">/</font> check <font color="#990000">-</font> <font color="#993399">1.0</font>
     ok <font color="#990000">=</font> ok <b><font color="#0000FF">and</font></b> numpy<font color="#990000">.</font><b><font color="#000000">all</font></b><font color="#990000">(</font> <b><font color="#000000">abs</font></b><font color="#990000">(</font>rel_error<font color="#990000">)</font> <font color="#990000">&lt;</font> <font color="#993399">1e-5</font> <font color="#990000">)</font>
     <b><font color="#0000FF">return</font></b> ok</tt></pre>

<hr>Input File: example/python/numeric/optimize_xam.py

</body>
</html>
