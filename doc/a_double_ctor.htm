<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>The a_double Constructor</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="The a_double Constructor">
<meta name="keywords" id="keywords" content=" the a_double constructor syntax purpose d a_other ad example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_a_double_ctor_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="a_double.htm" target="_top">Prev</a>
</td><td><a href="a_double_unary_op.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>cpp_lib</option>
<option>a_double</option>
<option>a_double_ctor</option>
</select>
</td>
<td>
<select onchange='choose_down4(this)'>
<option>cppad_py-&gt;</option>
<option>setup.py</option>
<option>library</option>
<option>whats_new_2018</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>py_lib</option>
<option>cpp_lib</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>cpp_lib-&gt;</option>
<option>a_double</option>
<option>vector</option>
<option>cpp_fun</option>
<option>sparse</option>
<option>cpp_utility</option>
<option>more_cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>a_double-&gt;</option>
<option>a_double_ctor</option>
<option>a_double_unary_op</option>
<option>a_double_property</option>
<option>a_double_binary</option>
<option>a_double_compare</option>
<option>a_double_assign</option>
<option>a_double_unary_fun</option>
<option>a_double_cond_assign</option>
</select>
</td>
<td>a_double_ctor</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>d</option>
<option>a_other</option>
<option>ad</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>The a_double Constructor</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;cppad_py.a_double()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;cppad_py.a_double(</span></font><i><font color="black"><span style='white-space: nowrap'>d</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;cppad_py.a_double(</span></font><i><font color="black"><span style='white-space: nowrap'>a_other</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
Creates a <code><font color="blue">cppad_py::a_double</font></code> object that can be use
to track floating point operations and preform algorithmic differentiation.

<br>
<br>
<b><big><a name="d" id="d">d</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>d</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The resulting 
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 variable represents
a constant function equal to 
<code><i><font color="black"><span style='white-space: nowrap'>d</span></font></i></code>
.

<br>
<br>
<b><big><a name="a_other" id="a_other">a_other</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;a_double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a_other</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The resulting 
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 variable is the same function
of the independent variables as 
<code><i><font color="black"><span style='white-space: nowrap'>a_other</span></font></i></code>
.

<br>
<br>
<b><big><a name="ad" id="ad">ad</a></big></b>
<br>
is the <code><font color="blue">a_double</font></code> object that is constructed.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
All of the other <code><font color="blue">a_double</font></code> examples use an <code><font color="blue">a_double</font></code>
constructor.


<hr>Input File: lib/cplusplus/a_double.cpp

</body>
</html>
