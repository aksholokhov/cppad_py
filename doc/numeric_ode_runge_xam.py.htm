<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Example Computing Derivative A Runge-Kutta Ode Solution</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Example Computing Derivative A Runge-Kutta Ode Solution">
<meta name="keywords" id="keywords" content=" example computing derivative runge-kutta ode solution source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_numeric_ode_runge_xam.py_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="numeric_optimize_xam.py.htm" target="_top">Prev</a>
</td><td><a href="library.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>numeric_xam</option>
<option>numeric_ode_runge_xam.py</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_py_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_numeric_xam_htm.js'></script>
</td>
<td>numeric_ode_runge_xam.py</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>Example Computing Derivative A Runge-Kutta Ode Solution</big></big></b></center>

<br><a href="numeric_ode_runge_xam.py.htm#ODE" target="_top">ODE</a>
<br><a href="numeric_ode_runge_xam.py.htm#Solution" target="_top">Solution</a>
<br><a href="numeric_ode_runge_xam.py.htm#Derivative of Solution" target="_top">Derivative&nbsp;of&nbsp;Solution</a>
<br><a href="numeric_ode_runge_xam.py.htm#Source Code" target="_top">Source&nbsp;Code</a>
<br><br>
<b><big><a name="ODE" id="ODE">ODE</a></big></b>

<br>
<small>@[@

	\partial_t y_i (t, x) =  f(t, y, x) \left\{ \begin{array}{rl}
		x_0               & {\rm if} \; i = 0 \\
		x_i y_{i-1} (t)   & {\rm otherwise}
\end{array} \right. 
@]@</small>with the initial condition <small>@(@
y(0) = 0
@)@</small>

<br>
<br>
<b><big><a name="Solution" id="Solution">Solution</a></big></b>
<br>
This is a special case for which we know the solution
<small>@[@

	y_i (t, x) = \left\{ \begin{array}{rl}
		t  x_0                            & {\rm if} \; i = 0 \\
		( t^i / (i+1) ! ) \prod_{j=0}^i x_j   & {\rm otherwise}
\end{array} \right. 
@]@</small>

<br>
<br>
<b><big><a name="Derivative of Solution" id="Derivative of Solution">Derivative of Solution</a></big></b>
<br>
For this special case, the partial derivative of the solution with respect
to the j-th component of the vector <small>@(@
x
@)@</small> is
<small>@[@

	\partial_{x(j)} y_i (t, x) =  \left\{ \begin{array}{rl}
		y_i (t, x) / x_j      & {\rm if} \; j \leq i \\
		0                     & {\rm otherwise}
\end{array} \right. 
@]@</small>


<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>

<pre><tt>
<b><font color="#000080">import</font></b> numpy
<b><font color="#000080">import</font></b> scipy<font color="#990000">.</font>misc
<b><font color="#000080">import</font></b> cppad_py
<b><font color="#0000FF">def</font></b> <b><font color="#000000">runge4</font></b><font color="#990000">(</font>fun<font color="#990000">,</font> y0<font color="#990000">,</font> t<font color="#990000">,</font> h<font color="#990000">)</font> <font color="#990000">:</font>
     k1     <font color="#990000">=</font> h <font color="#990000">*</font> <b><font color="#000000">fun</font></b><font color="#990000">(</font>t<font color="#990000">,</font>           y0<font color="#990000">)</font>
     k2     <font color="#990000">=</font> h <font color="#990000">*</font> <b><font color="#000000">fun</font></b><font color="#990000">(</font>t <font color="#990000">+</font> h <font color="#990000">/</font> <font color="#993399">2.0</font><font color="#990000">,</font> y0 <font color="#990000">+</font> k1 <font color="#990000">/</font> <font color="#993399">2.0</font><font color="#990000">)</font>
     k3     <font color="#990000">=</font> h <font color="#990000">*</font> <b><font color="#000000">fun</font></b><font color="#990000">(</font>t <font color="#990000">+</font> h <font color="#990000">/</font> <font color="#993399">2.0</font><font color="#990000">,</font> y0 <font color="#990000">+</font> k2 <font color="#990000">/</font> <font color="#993399">2.0</font><font color="#990000">)</font>
     k4     <font color="#990000">=</font> h <font color="#990000">*</font> <b><font color="#000000">fun</font></b><font color="#990000">(</font>t <font color="#990000">+</font> h<font color="#990000">,</font>       y0 <font color="#990000">+</font> k3 <font color="#990000">)</font>
     y1     <font color="#990000">=</font> y0 <font color="#990000">+</font> <font color="#990000">(</font>k1 <font color="#990000">+</font> <font color="#993399">2.0</font> <font color="#990000">*</font> k2 <font color="#990000">+</font> <font color="#993399">2.0</font> <font color="#990000">*</font> k3 <font color="#990000">+</font> k4<font color="#990000">)</font> <font color="#990000">/</font> <font color="#993399">6.0</font>
     <b><font color="#0000FF">return</font></b> y1
<i><font color="#9A1900">#</font></i>
<b><font color="#0000FF">def</font></b> <b><font color="#000000">f</font></b><font color="#990000">(</font>t<font color="#990000">,</font> y<font color="#990000">,</font> x<font color="#990000">)</font> <font color="#990000">:</font>
     y_shift <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">concatenate</font></b><font color="#990000">(</font> <font color="#990000">(</font> <font color="#990000">[</font><font color="#993399">1.0</font><font color="#990000">]</font> <font color="#990000">,</font> y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">:-</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">)</font> <font color="#990000">)</font>
     <b><font color="#0000FF">return</font></b> x <font color="#990000">*</font> y_shift
<i><font color="#9A1900">#</font></i>
<b><font color="#0000FF">def</font></b> <b><font color="#000000">numeric_ode_runge_xam</font></b><font color="#990000">()</font> <font color="#990000">:</font>
     ok    <font color="#990000">=</font> True
     nx    <font color="#990000">=</font> <font color="#993399">4</font>
     eps99 <font color="#990000">=</font> <font color="#993399">99.0</font> <font color="#990000">*</font> numpy<font color="#990000">.</font><b><font color="#000000">finfo</font></b><font color="#990000">(</font>float<font color="#990000">).</font>eps
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># independent variables for this g(x) = y(1, x)</font></i>
     x  <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">array</font></b><font color="#990000">(</font> nx <font color="#990000">*</font> <font color="#990000">[</font> <font color="#993399">1.0</font> <font color="#990000">]</font> <font color="#990000">)</font>
     ax <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">independent</font></b><font color="#990000">(</font>x<font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># function to pass to runge4</font></i>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">fun</font></b><font color="#990000">(</font>t<font color="#990000">,</font> ay<font color="#990000">)</font> <font color="#990000">:</font>
          <b><font color="#0000FF">return</font></b> <b><font color="#000000">f</font></b><font color="#990000">(</font>t<font color="#990000">,</font> ay<font color="#990000">,</font> ax<font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># initiali value for the ODE</font></i>
     ay_start <font color="#990000">=</font>  numpy<font color="#990000">.</font><b><font color="#000000">array</font></b><font color="#990000">(</font> nx <font color="#990000">*</font> <font color="#990000">[</font> cppad_py<font color="#990000">.</font><b><font color="#000000">a_double</font></b><font color="#990000">(</font><font color="#993399">0.0</font><font color="#990000">)</font> <font color="#990000">]</font> <font color="#990000">)</font>
     t_start  <font color="#990000">=</font> <font color="#993399">0.0</font>
     t_step   <font color="#990000">=</font> <font color="#993399">0.75</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># take one step</font></i>
     ay <font color="#990000">=</font> <b><font color="#000000">runge4</font></b><font color="#990000">(</font>fun<font color="#990000">,</font> ay_start<font color="#990000">,</font> t_start<font color="#990000">,</font> t_step<font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># g(x) = y(1, x)</font></i>
     g <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">d_fun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># Check g_i (x) = prod_{j=0}^i x[j] t^(i+1) / (i+1) !</font></i>
     <i><font color="#9A1900"># 4th order method should be very accutate for functions</font></i>
     <i><font color="#9A1900"># or order 4 or less in t.</font></i>
     x  <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">arange</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> nx<font color="#990000">)</font> <font color="#990000">+</font> <font color="#993399">1.0</font>
     gx <font color="#990000">=</font> g<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">)</font>
     prod <font color="#990000">=</font> <font color="#993399">1.0</font>
     <b><font color="#0000FF">for</font></b> i <b><font color="#0000FF">in</font></b> <b><font color="#000000">range</font></b><font color="#990000">(</font>nx<font color="#990000">)</font> <font color="#990000">:</font>
          prod      <font color="#990000">=</font> prod <font color="#990000">*</font> x<font color="#990000">[</font>i<font color="#990000">]</font>
          check     <font color="#990000">=</font> prod <font color="#990000">*</font> numpy<font color="#990000">.</font><b><font color="#000000">power</font></b><font color="#990000">(</font>t_step<font color="#990000">,</font> i<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font> <font color="#990000">/</font> scipy<font color="#990000">.</font>misc<font color="#990000">.</font><b><font color="#000000">factorial</font></b><font color="#990000">(</font>i<font color="#990000">+</font><font color="#993399">1</font><font color="#990000">)</font>
          rel_error <font color="#990000">=</font> gx<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">/</font> check <font color="#990000">-</font> <font color="#993399">1.0</font>
          ok       <font color="#990000">&amp;=</font> <b><font color="#000000">abs</font></b><font color="#990000">(</font>rel_error<font color="#990000">)</font> <font color="#990000">&lt;</font> eps99
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># Check derivative of g_i (x) w.r.t x_j</font></i>
     <i><font color="#9A1900"># is zero for i &lt; j and  g_i(x) / x_j otherwise</font></i>
     J <font color="#990000">=</font> g<font color="#990000">.</font><b><font color="#000000">jacobian</font></b><font color="#990000">(</font>x<font color="#990000">)</font>
     <b><font color="#0000FF">for</font></b> j <b><font color="#0000FF">in</font></b> <b><font color="#000000">range</font></b><font color="#990000">(</font>nx<font color="#990000">)</font> <font color="#990000">:</font>
          <b><font color="#0000FF">for</font></b> i <b><font color="#0000FF">in</font></b> <b><font color="#000000">range</font></b><font color="#990000">(</font>nx<font color="#990000">)</font> <font color="#990000">:</font>
               <b><font color="#0000FF">if</font></b> i <font color="#990000">&lt;</font> j <font color="#990000">:</font>
                    ok <font color="#990000">&amp;=</font> J<font color="#990000">[</font>i<font color="#990000">,</font>j<font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">0.0</font>
               <b><font color="#0000FF">else</font></b> <font color="#990000">:</font>
                    check     <font color="#990000">=</font> gx<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">/</font> x<font color="#990000">[</font>j<font color="#990000">]</font>
                    rel_error <font color="#990000">=</font> J<font color="#990000">[</font>i<font color="#990000">,</font>j<font color="#990000">]</font> <font color="#990000">/</font> check <font color="#990000">-</font> <font color="#993399">1.0</font>
                    ok       <font color="#990000">&amp;=</font> <b><font color="#000000">abs</font></b><font color="#990000">(</font>rel_error<font color="#990000">)</font> <font color="#990000">&lt;</font> eps99

     <b><font color="#0000FF">return</font></b> ok</tt></pre>

<hr>Input File: example/python/numeric/ode_runge_xam.py

</body>
</html>
