<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Forward Mode AD</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Forward Mode AD">
<meta name="keywords" id="keywords" content=" forward mode ad syntax taylor coefficient f f(x) x(t) y(t) p size_order xp yp example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_py_fun_forward_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="fun_hessian_xam.py.htm" target="_top">Prev</a>
</td><td><a href="fun_forward_xam.py.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>py_lib</option>
<option>py_fun</option>
<option>py_fun_forward</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_py_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_library_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_py_lib_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_py_fun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_py_fun_forward_htm.js'></script>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>Forward Mode AD</big></big></b></center>

<br><a href="py_fun_forward.htm#Syntax" target="_top">Syntax</a>
<br><a href="py_fun_forward.htm#Taylor Coefficient" target="_top">Taylor&nbsp;Coefficient</a>
<br><a href="py_fun_forward.htm#f" target="_top">f</a>
<br><a href="py_fun_forward.htm#f(x)" target="_top">f(x)</a>
<br><a href="py_fun_forward.htm#X(t)" target="_top">X(t)</a>
<br><a href="py_fun_forward.htm#Y(t)" target="_top">Y(t)</a>
<br><a href="py_fun_forward.htm#p" target="_top">p</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="py_fun_forward.htm#p.size_order" target="_top">size_order</a>
<br><a href="py_fun_forward.htm#xp" target="_top">xp</a>
<br><a href="py_fun_forward.htm#yp" target="_top">yp</a>
<br><a href="py_fun_forward.htm#Example" target="_top">Example</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>yp</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.forward(</span></font><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>xp</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Taylor Coefficient" id="Taylor Coefficient">Taylor Coefficient</a></big></b>
<br>
For a function <small>@(@
g(t)
@)@</small> of a scalar argument <small>@(@
t \in \B{R}
@)@</small>,
the <code><i>p</i></code>-th order Taylor coefficient is its
<code><font color="blue">p</font></code>-th order derivative divided by 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 factorial
and evaluated at <small>@(@
t = 0
@)@</small>; i.e.,
<small>@[@

	g^{(p)} (0) /  p !

@]@</small>

<br>
<br>
<b><big><a name="f" id="f">f</a></big></b>
<br>
This is either a
<a href="py_fun_ctor.htm#Syntax.d_fun" target="_top"><span style='white-space: nowrap'>d_fun</span></a>
 or
<a href="py_fun_ctor.htm#Syntax.a_fun" target="_top"><span style='white-space: nowrap'>a_fun</span></a>
 function object.
Note that its state is changed by this operation because
all the Taylor coefficient that it calculates for every
variable in recording are stored.
See more discussion of this fact under the heading
<a href="py_fun_forward.htm#p" target="_top"><span style='white-space: nowrap'>p</span></a>
 below.

<br>
<br>
<b><big><a name="f(x)" id="f(x)">f(x)</a></big></b>
<br>
We use the notation <small>@(@
f: \B{R}^n \rightarrow \B{R}^m
@)@</small>
for the function corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
Note that 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 is the size of <a href="py_fun_ctor.htm#ax" target="_top"><span style='white-space: nowrap'>ax</span></a>

and 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 is the size of <a href="py_fun_ctor.htm#ay" target="_top"><span style='white-space: nowrap'>ay</span></a>

in to the constructor for 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.

<br>
<br>
<b><big><a name="X(t)" id="X(t)">X(t)</a></big></b>
<br>
We use the notation <small>@(@
X : \B{R} \rightarrow \B{R}^n
@)@</small>
for a function that the calling routine chooses.

<br>
<br>
<b><big><a name="Y(t)" id="Y(t)">Y(t)</a></big></b>
<br>
We define the function <small>@(@
Y : \B{R} \rightarrow \B{R}^n
@)@</small>
by <small>@(@
Y(t) = f(X(t))
@)@</small>.

<br>
<br>
<b><big><a name="p" id="p">p</a></big></b>
<br>
This argument has type <code><font color="blue">int</font></code> and is non-negative.
Its value is the order of the Taylor coefficient being calculated.
If there was no call to <code><font color="blue">forward</font></code> for this 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
,
the value of 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 must be zero.
Otherwise, it must be between zero and one greater that its
value for the previous call using this 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
After this call, the Taylor coefficients for orders zero though 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
,
and for every variable in the recording, will be stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.

<br>
<br>
<big><a name="p.size_order" id="p.size_order">size_order</a></big>
<br>
After this call,
<a href="py_fun_property.htm#size_order" target="_top"><span style='white-space: nowrap'>f.size_order()</span></a>
 is 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'>+1</span></font></code>
.

<br>
<br>
<b><big><a name="xp" id="xp">xp</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is a <code><font color="blue">d_fun</font></code> (<code><font color="blue">a_fun</font></code>) object, 
<code><i><font color="black"><span style='white-space: nowrap'>xp</span></font></i></code>

is a numpy vector with <code><font color="blue">float</font></code> (<code><font color="blue">a_double</font></code>) elements
and size 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.
It specifies the <code><i>p</i></code>-th order Taylor coefficients for 
<code><i><font color="black"><span style='white-space: nowrap'>X(t)</span></font></i></code>
.

<br>
<br>
<b><big><a name="yp" id="yp">yp</a></big></b>
<br>
The result is a numpy vector with <code><font color="blue">float</font></code> (<code><font color="blue">a_double</font></code>) elements
and size 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
.
It is the <code><i>p</i></code>-th order Taylor coefficients for <small>@(@
Y(t)
@)@</small>.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
<a href="fun_forward_xam.py.htm" target="_top"><span style='white-space: nowrap'>fun_forward_xam.py</span></a>



<hr>Input File: lib/python/fun_forward.py

</body>
</html>
