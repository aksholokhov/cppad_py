<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Python: Hessian Sparsity Patterns: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Python: Hessian Sparsity Patterns: Example and Test">
<meta name="keywords" id="keywords" content=" python: hessian sparsity patterns: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_sparse_hes_pattern_xam.py_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="py_hes_sparsity.htm" target="_top">Prev</a>
</td><td><a href="py_sparse_jac.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>py_lib</option>
<option>py_sparse</option>
<option>py_hes_sparsity</option>
<option>sparse_hes_pattern_xam.py</option>
</select>
</td>
<td>
<select onchange='choose_down4(this)'>
<option>library-&gt;</option>
<option>py_lib</option>
<option>cpp_lib</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>py_lib-&gt;</option>
<option>py_fun</option>
<option>py_sparse</option>
<option>py_utility</option>
<option>more_py</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>py_sparse-&gt;</option>
<option>py_sparse_rc</option>
<option>py_sparse_rcv</option>
<option>py_jac_sparsity</option>
<option>py_hes_sparsity</option>
<option>py_sparse_jac</option>
<option>py_sparse_hes</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>py_hes_sparsity-&gt;</option>
<option>sparse_hes_pattern_xam.py</option>
</select>
</td>
<td>sparse_hes_pattern_xam.py</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@ 

<center><b><big><big>Python: Hessian Sparsity Patterns: Example and Test</big></big></b></center>
<pre><tt><b><font color="#0000FF">def</font></b> <b><font color="#000000">sparse_hes_pattern_xam</font></b><font color="#990000">()</font> <font color="#990000">:</font>
     <i><font color="#9A1900">#</font></i>
     <b><font color="#000080">import</font></b> numpy
     <b><font color="#000080">import</font></b> cppad_py
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># initialize return variable</font></i>
     ok <font color="#990000">=</font> True
     <i><font color="#9A1900"># ---------------------------------------------------------------------</font></i>
     <i><font color="#9A1900"># number of dependent and independent variables</font></i>
     n <font color="#990000">=</font> <font color="#993399">3</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># create the independent variables ax</font></i>
     x <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">empty</font></b><font color="#990000">(</font>n<font color="#990000">,</font> dtype<font color="#990000">=</font>float<font color="#990000">)</font>
     <b><font color="#0000FF">for</font></b> i <b><font color="#0000FF">in</font></b> <b><font color="#000000">range</font></b><font color="#990000">(</font> n  <font color="#990000">)</font> <font color="#990000">:</font>
          x<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> i <font color="#990000">+</font> <font color="#993399">2.0</font>
     <i><font color="#9A1900">#</font></i>
     ax <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">independent</font></b><font color="#990000">(</font>x<font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># create dependent variables ay with ay[i] = ax[j] * ax[i]</font></i>
     <i><font color="#9A1900"># where i = mod(j + 1, n)</font></i>
     ay <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">empty</font></b><font color="#990000">(</font>n<font color="#990000">,</font> dtype<font color="#990000">=</font>cppad_py<font color="#990000">.</font>a_double<font color="#990000">)</font>
     <b><font color="#0000FF">for</font></b> j <b><font color="#0000FF">in</font></b> <b><font color="#000000">range</font></b><font color="#990000">(</font> n  <font color="#990000">)</font> <font color="#990000">:</font>
          i <font color="#990000">=</font> j<font color="#990000">+</font><font color="#993399">1</font>
          <b><font color="#0000FF">if</font></b> i <font color="#990000">&gt;=</font> n  <font color="#990000">:</font>
               i <font color="#990000">=</font> i <font color="#990000">-</font> n
          <i><font color="#9A1900">#</font></i>
          ay_i <font color="#990000">=</font> ax<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">*</font> ax<font color="#990000">[</font>j<font color="#990000">]</font>
          ay<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> ay_i
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># define af corresponding to f(x)</font></i>
     f  <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">d_fun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># Set select_d (domain) to all true, initial select_r (range) to all false</font></i>
     select_d <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">empty</font></b><font color="#990000">(</font>n<font color="#990000">,</font> dtype<font color="#990000">=</font>bool<font color="#990000">)</font>
     select_r <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">empty</font></b><font color="#990000">(</font>n<font color="#990000">,</font> dtype<font color="#990000">=</font>bool<font color="#990000">)</font>
     <b><font color="#0000FF">for</font></b> i <b><font color="#0000FF">in</font></b> <b><font color="#000000">range</font></b><font color="#990000">(</font> n <font color="#990000">)</font> <font color="#990000">:</font>
          select_d<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> True
          select_r<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> False
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># only select component 0 of the range function</font></i>
     <i><font color="#9A1900"># f_0 (x) = x_0 * x_{n-1}</font></i>
     select_r<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> True
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># loop over forward and reverse mode</font></i>
     <b><font color="#0000FF">for</font></b> mode <b><font color="#0000FF">in</font></b> <b><font color="#000000">range</font></b><font color="#990000">(</font> <font color="#993399">2</font> <font color="#990000">)</font> <font color="#990000">:</font>
          pat_out <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">sparse_rc</font></b><font color="#990000">()</font>
          <b><font color="#0000FF">if</font></b> mode <font color="#990000">==</font> <font color="#993399">0</font>  <font color="#990000">:</font>
               f<font color="#990000">.</font><b><font color="#000000">for_hes_sparsity</font></b><font color="#990000">(</font>select_d<font color="#990000">,</font> select_r<font color="#990000">,</font> pat_out<font color="#990000">)</font>
          <i><font color="#9A1900">#</font></i>
          <b><font color="#0000FF">if</font></b> mode <font color="#990000">==</font> <font color="#993399">1</font>  <font color="#990000">:</font>
               f<font color="#990000">.</font><b><font color="#000000">rev_hes_sparsity</font></b><font color="#990000">(</font>select_d<font color="#990000">,</font> select_r<font color="#990000">,</font> pat_out<font color="#990000">)</font>
          <i><font color="#9A1900">#</font></i>
          <i><font color="#9A1900">#</font></i>
          <i><font color="#9A1900"># check that result is sparsity pattern for Hessian of f_0 (x)</font></i>
          ok <font color="#990000">=</font> ok <b><font color="#0000FF">and</font></b> pat_out<font color="#990000">.</font><b><font color="#000000">nnz</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">2</font>
          row <font color="#990000">=</font> pat_out<font color="#990000">.</font><b><font color="#000000">row</font></b><font color="#990000">()</font>
          col <font color="#990000">=</font> pat_out<font color="#990000">.</font><b><font color="#000000">col</font></b><font color="#990000">()</font>
          <b><font color="#0000FF">for</font></b> k <b><font color="#0000FF">in</font></b> <b><font color="#000000">range</font></b><font color="#990000">(</font> <font color="#993399">2</font> <font color="#990000">)</font> <font color="#990000">:</font>
               r <font color="#990000">=</font> row<font color="#990000">[</font>k<font color="#990000">]</font>
               c <font color="#990000">=</font> col<font color="#990000">[</font>k<font color="#990000">]</font>
               <b><font color="#0000FF">if</font></b> r <font color="#990000">&lt;=</font> c  <font color="#990000">:</font>
                    ok <font color="#990000">=</font> ok <b><font color="#0000FF">and</font></b> r <font color="#990000">==</font> <font color="#993399">0</font>
                    ok <font color="#990000">=</font> ok <b><font color="#0000FF">and</font></b> c <font color="#990000">==</font> n<font color="#990000">-</font><font color="#993399">1</font>
               <i><font color="#9A1900">#</font></i>
               <b><font color="#0000FF">if</font></b> r <font color="#990000">&gt;=</font> c  <font color="#990000">:</font>
                    ok <font color="#990000">=</font> ok <b><font color="#0000FF">and</font></b> r <font color="#990000">==</font> n<font color="#990000">-</font><font color="#993399">1</font>
                    ok <font color="#990000">=</font> ok <b><font color="#0000FF">and</font></b> c <font color="#990000">==</font> <font color="#993399">0</font>
               <i><font color="#9A1900">#</font></i>
          <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900">#</font></i>
     <b><font color="#0000FF">return</font></b><font color="#990000">(</font> ok <font color="#990000">)</font>
<i><font color="#9A1900">#</font></i></tt></pre>

<hr>Input File: lib/example/python/sparse_hes_pattern_xam.py

</body>
</html>
