<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Steps To Add More Python Functions</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Steps To Add More Python Functions">
<meta name="keywords" id="keywords" content=" steps to add more python functions purpose documentation independent new_dynamic example implementation fun_new_dynamic.py __init__.py testing ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_more_py_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="vec2numpy.htm" target="_top">Prev</a>
</td><td><a href="cpp_lib.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>py_lib</option>
<option>more_py</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_py-&gt;</option>
<option>setup.py</option>
<option>library</option>
<option>whats_new_2018</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>library-&gt;</option>
<option>py_lib</option>
<option>cpp_lib</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>py_lib-&gt;</option>
<option>py_fun</option>
<option>py_sparse</option>
<option>py_utility</option>
<option>more_py</option>
</select>
</td>
<td>more_py</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Documentation</option>
<option>---..independent</option>
<option>---..new_dynamic</option>
<option>---..Example</option>
<option>Implementation</option>
<option>---..independent</option>
<option>---..new_dynamic</option>
<option>---..fun_new_dynamic.py</option>
<option>---..__init__.py</option>
<option>Example</option>
<option>Testing</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@



<center><b><big><big>Steps To Add More Python Functions</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This section outlines the steps for adding more python functionality
to cppad_py.
This is done by example showing how the <a href="py_fun_new_dynamic.htm" target="_top"><span style='white-space: nowrap'>py_fun_new_dynamic</span></a>
 was added.
This example case was chosen because it required both changing one
python function, <a href="py_independent.htm" target="_top"><span style='white-space: nowrap'>py_independent</span></a>
,
and adding a new python function, <a href="py_fun_new_dynamic.htm" target="_top"><span style='white-space: nowrap'>py_fun_new_dynamic</span></a>
.

<br>
<br>
<b><big><a name="Documentation" id="Documentation">Documentation</a></big></b>


<br>
<br>
<big><a name="Documentation.independent" id="Documentation.independent">independent</a></big>
<br>
The python file <code><font color="blue">lib/python/independent.py</font></code>
was edited to add the following syntax documentation:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>adynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>)&nbsp;=&nbsp;cppad_py::independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
and the extra return value was documented; see
<a href="py_independent.htm#adynamic" target="_top"><span style='white-space: nowrap'>adynamic</span></a>
.

<br>
<br>
<big><a name="Documentation.new_dynamic" id="Documentation.new_dynamic">new_dynamic</a></big>
<br>
The <a href="cpp_fun_new_dynamic.htm" target="_top"><span style='white-space: nowrap'>cpp_fun_new_dynamic</span></a>
 documentation was added
in the file <code><font color="blue">lib/python/fun_new_dynamic.py</font></code>.
In addition, the OMhelp command
<code><font color='blue'><pre style='display:inline'> 
     %lib/python/fun_new_dynamic.py
</pre></font></code>
was added to the file <code><font color="blue">lib/python/fun.py</font></code>.

<br>
<br>
<big><a name="Documentation.Example" id="Documentation.Example">Example</a></big>
<br>
An example file was added to the documentation,
below the <a href="py_independent.htm" target="_top"><span style='white-space: nowrap'>py_independent</span></a>
 section, using the OMhelp commands:
<code><font color="blue">
	$children%
		lib/example/python/fun_dynamic_xam.py
	%$$
</font></code>
In addition, a reference to this example was added under the
<a href="py_independent.htm#Example" target="_top"><span style='white-space: nowrap'>example</span></a>
 heading in the <code><font color="blue">independent</font></code>
documentation.

<br>
<br>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<br>
<br>
<big><a name="Implementation.independent" id="Implementation.independent">independent</a></big>
<br>
The <code><font color="blue">independent</font></code> function in <code><font color="blue">lib/python/independent.py</font></code>
was changed to handle dynamic parameters as follows:
<pre><tt><b><font color="#000080">import</font></b> cppad_py
<b><font color="#000080">import</font></b> numpy
<b><font color="#0000FF">def</font></b> <b><font color="#000000">independent</font></b><font color="#990000">(</font>x<font color="#990000">,</font> dynamic <font color="#990000">=</font> None<font color="#990000">)</font> <font color="#990000">:</font>
<i><font color="#9A1900">     """</font></i>
<i><font color="#9A1900">     ax = independent(x)</font></i>
<i><font color="#9A1900">     creates the indepedent numpy vector ax, with value equal numpy vector x,</font></i>
<i><font color="#9A1900">     and starts recording a_double operations.</font></i>
<i><font color="#9A1900">     """</font></i>
     <i><font color="#9A1900"># convert x -&gt; u</font></i>
     dtype    <font color="#990000">=</font> float
     <i><font color="#9A1900">#</font></i>
     nx <font color="#990000">=</font> x<font color="#990000">.</font>size
     <b><font color="#0000FF">if</font></b> dynamic <b><font color="#0000FF">is</font></b> None <font color="#990000">:</font>
          syntax   <font color="#990000">=</font> <font color="#FF0000">'independent(x)'</font>
          u <font color="#990000">=</font> cppad_py<font color="#990000">.</font>utility<font color="#990000">.</font><b><font color="#000000">numpy2vec</font></b><font color="#990000">(</font>x<font color="#990000">,</font> dtype<font color="#990000">,</font> nx<font color="#990000">,</font> syntax<font color="#990000">,</font> <font color="#FF0000">'x'</font><font color="#990000">)</font>
          av <font color="#990000">=</font> cppad_py<font color="#990000">.</font>swig<font color="#990000">.</font><b><font color="#000000">independent</font></b><font color="#990000">(</font>u<font color="#990000">)</font>
          ax <font color="#990000">=</font> cppad_py<font color="#990000">.</font>utility<font color="#990000">.</font><b><font color="#000000">vec2numpy</font></b><font color="#990000">(</font>av<font color="#990000">,</font> av<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">());</font>
          <b><font color="#0000FF">return</font></b> ax
     <i><font color="#9A1900">#</font></i>
     nd       <font color="#990000">=</font> dynamic<font color="#990000">.</font>size
     syntax   <font color="#990000">=</font> <font color="#FF0000">'independent(x, dynamic)'</font>
     u <font color="#990000">=</font> cppad_py<font color="#990000">.</font>utility<font color="#990000">.</font><b><font color="#000000">numpy2vec</font></b><font color="#990000">(</font>x<font color="#990000">,</font> dtype<font color="#990000">,</font> nx<font color="#990000">,</font> syntax<font color="#990000">,</font> <font color="#FF0000">'x'</font><font color="#990000">)</font>
     v <font color="#990000">=</font> cppad_py<font color="#990000">.</font>utility<font color="#990000">.</font><b><font color="#000000">numpy2vec</font></b><font color="#990000">(</font>dynamic<font color="#990000">,</font> dtype<font color="#990000">,</font> nd<font color="#990000">,</font> syntax<font color="#990000">,</font> <font color="#FF0000">'dynamic'</font><font color="#990000">)</font>
     a_both   <font color="#990000">=</font> cppad_py<font color="#990000">.</font>swig<font color="#990000">.</font><b><font color="#000000">independent</font></b><font color="#990000">(</font>u<font color="#990000">,</font> v<font color="#990000">)</font>
     ax       <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">empty</font></b><font color="#990000">(</font>nx<font color="#990000">,</font>       dtype<font color="#990000">=</font>cppad_py<font color="#990000">.</font>a_double<font color="#990000">)</font>
     adynamic <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">empty</font></b><font color="#990000">(</font>nd<font color="#990000">,</font> dtype<font color="#990000">=</font>cppad_py<font color="#990000">.</font>a_double<font color="#990000">)</font>
     <i><font color="#9A1900"># use copy constructor so a separate copy is made for numpy arrays</font></i>
     <b><font color="#0000FF">for</font></b> i <b><font color="#0000FF">in</font></b> <b><font color="#000000">range</font></b><font color="#990000">(</font>nx<font color="#990000">)</font> <font color="#990000">:</font>
          ax<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">a_double</font></b><font color="#990000">(</font> a_both<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">)</font>
     <b><font color="#0000FF">for</font></b> i <b><font color="#0000FF">in</font></b> <b><font color="#000000">range</font></b><font color="#990000">(</font>nd<font color="#990000">)</font> <font color="#990000">:</font>
          adynamic<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">a_double</font></b><font color="#990000">(</font> a_both<font color="#990000">[</font>nx <font color="#990000">+</font> i<font color="#990000">]</font> <font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <b><font color="#0000FF">return</font></b> <font color="#990000">(</font>ax<font color="#990000">,</font> adynamic<font color="#990000">)</font></tt></pre>
<br>
<big><a name="Implementation.new_dynamic" id="Implementation.new_dynamic">new_dynamic</a></big>
<br>
The following function declaration was added to the
<code><font color="blue">d_fun</font></code> class
in the <code><font color="blue">lib/python/fun.py</font></code> file:
<pre style='display:inline'><tt>
    <b><font color="#0000FF">def</font></b> <b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>self<font color="#990000">,</font> dynamic<font color="#990000">)</font> <font color="#990000">:</font>
        <b><font color="#0000FF">return</font></b> cppad_py<font color="#990000">.</font><b><font color="#000000">d_fun_new_dynamic</font></b><font color="#990000">(</font>self<font color="#990000">.</font>f<font color="#990000">,</font> dynamic<font color="#990000">)</font>
</tt></pre>
A similar declaration was added to the <code><font color="blue">a_fun</font></code> class.

<br>
<br>
<big><a name="Implementation.fun_new_dynamic.py" id="Implementation.fun_new_dynamic.py">fun_new_dynamic.py</a></big>
<br>
The implementation of <code><font color="blue">d_fun_new_dynamic</font></code> and
<code><font color="blue">a_fun_new_dynamic</font></code> were added to the file
<code><font color="blue">fun_new_dynamic.py</font></code>

<br>
<br>
<big><a name="Implementation.__init__.py" id="Implementation.__init__.py">__init__.py</a></big>
<br>
The following code was added to the file <code><font color="blue">lib/python/__init__.py</font></code>:
<code><font color='blue'><pre style='display:inline'> 
from cppad_py.fun_new_dynamic import a_fun_new_dynamic
from cppad_py.fun_new_dynamic import d_fun_new_dynamic
</pre></font></code>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <code><font color="blue">lib/example/python/fun_dynamic_xam.py</font></code> was added
with the following contents:
<a href="fun_dynamic_xam.py.htm" target="_top"><span style='white-space: nowrap'>fun_dynamic_xam.py</span></a>
.
In addition, in the file <code><font color="blue">lib/example/python/check_all.py.in</font></code>,
<code><font color="blue">%
	'fun_dynamic_xam',
%</font></code>
was added to the list of python example files.

<br>
<br>
<b><big><a name="Testing" id="Testing">Testing</a></big></b>
<br>
You must do a git add for all of the new files before running
<code><font color="blue">bin/check_all.sh</font></code>
After all the changes above were implemented,
<code><font color="blue">bin/check_all.sh</font></code> was run and the changes were made
until the warnings and errors were fixed.
The command
<code><font color='blue'><pre style='display:inline'> 
     grep 'fun_dynamic_xam' check_all.log
</pre></font></code>
was used to make sure that the new python example / test was run.
Note that the python files in <code><font color="blue">cppad_py</font></code> are copies of the
python files in <code><font color="blue">lib/python</font></code>.
So when you fix errors during testing, you need to fix the
<code><font color="blue">lib/python</font></code> file.
Also note that if a particular step in <code><font color="blue">bin/check_all.sh</font></code> is failing,
you can just re-run that step to see if a particular fix works.
Once the tests were working, the changes where checked into using
<code><font color="blue">git</font></code>.


<hr>Input File: lib/python/more_py.omh

</body>
</html>
