<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Properties of a Function Object</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Properties of a Function Object">
<meta name="keywords" id="keywords" content=" properties function object syntax f size_domain size_range size_var size_op size_order example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cpp_fun_property_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="cpp_fun_ctor.htm" target="_top">Prev</a>
</td><td><a href="fun_property_xam.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>cpp_lib</option>
<option>cpp_fun</option>
<option>cpp_fun_property</option>
</select>
</td>
<td>
<select onchange='choose_down4(this)'>
<option>cppad_py-&gt;</option>
<option>setup.py</option>
<option>library</option>
<option>whats_new_2018</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>py_lib</option>
<option>cpp_lib</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>cpp_lib-&gt;</option>
<option>a_double</option>
<option>vector</option>
<option>cpp_fun</option>
<option>sparse</option>
<option>cpp_utility</option>
<option>more_cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>cpp_fun-&gt;</option>
<option>cpp_independent</option>
<option>cpp_abort_recording</option>
<option>cpp_fun_ctor</option>
<option>cpp_fun_property</option>
<option>cpp_fun_new_dynamic</option>
<option>cpp_fun_jacobian</option>
<option>cpp_fun_hessian</option>
<option>cpp_fun_forward</option>
<option>cpp_fun_reverse</option>
<option>cpp_fun_optimize</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>cpp_fun_property-&gt;</option>
<option>fun_property_xam.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>f</option>
<option>size_domain</option>
<option>size_range</option>
<option>size_var</option>
<option>size_op</option>
<option>size_order</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@


<center><b><big><big>Properties of a Function Object</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><font color="blue"><span style='white-space: nowrap'>a_fun&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>(</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_domain()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_range()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>v</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_var()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_op()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.size_order()<br>
</span></font></code>
<br>
<b><big><a name="f" id="f">f</a></big></b>
<br>
This is either a
<a href="cpp_fun_ctor.htm#Syntax.d_fun" target="_top"><span style='white-space: nowrap'>d_fun</span></a>
 or
<a href="cpp_fun_ctor.htm#Syntax.a_fun" target="_top"><span style='white-space: nowrap'>a_fun</span></a>
 function object
and is <code><font color="blue">const</font></code>.

<br>
<br>
<b><big><a name="size_domain" id="size_domain">size_domain</a></big></b>
<br>
The return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the size of the vector
<a href="cpp_fun_ctor.htm#ax" target="_top"><span style='white-space: nowrap'>ax</span></a>
 in the function constructor; i.e.,
the number of independent variables.

<br>
<br>
<b><big><a name="size_range" id="size_range">size_range</a></big></b>
<br>
The return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the size of the vector
<a href="cpp_fun_ctor.htm#ay" target="_top"><span style='white-space: nowrap'>ay</span></a>
 in the function constructor; i.e.,
the number of dependent variables.

<br>
<br>
<b><big><a name="size_var" id="size_var">size_var</a></big></b>
<br>
The return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the number of variables in the function.
This includes the independent variables, dependent variables,
and any variables that are used to compute the dependent variables
from the independent variables.

<br>
<br>
<b><big><a name="size_op" id="size_op">size_op</a></big></b>
<br>
The return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the number of atomic operations that are used to express
the dependent variables as a function of the independent variables.

<br>
<br>
<b><big><a name="size_order" id="size_order">size_order</a></big></b>
<br>
The return value has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the number of Taylor coefficients currently stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
,
for every variable in the operation sequence corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
These coefficients are computed by <a href="cpp_fun_forward.htm" target="_top"><span style='white-space: nowrap'>cpp_fun_forward</span></a>
.
This is different from the other function properties in that it can change
after each call to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.forward</span></font></code>
; see
<a href="cpp_fun_forward.htm#p.size_order" target="_top"><span style='white-space: nowrap'>size_order</span></a>
 in the forward mode section.
The initial value for this property, when the object 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>

or 
<code><i><font color="black"><span style='white-space: nowrap'>af</span></font></i></code>
 is created, is zero.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
<a href="fun_property_xam.cpp.htm" target="_top"><span style='white-space: nowrap'>fun_property_xam.cpp</span></a>



<hr>Input File: lib/cplusplus/fun.cpp

</body>
</html>
