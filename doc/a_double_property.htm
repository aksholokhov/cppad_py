<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Properties of an a_double Object</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Properties of an a_double Object">
<meta name="keywords" id="keywords" content=" properties a_double object syntax ad value restriction parameter variable near_equal var2par example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_a_double_property_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="a_double_unary_op_xam.py.htm" target="_top">Prev</a>
</td><td><a href="a_double_property_xam.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>cpp_lib</option>
<option>a_double</option>
<option>a_double_property</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_py_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_library_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cpp_lib_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_a_double_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_a_double_property_htm.js'></script>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@


<center><b><big><big>Properties of an a_double Object</big></big></b></center>

<br><a href="a_double_property.htm#Syntax" target="_top">Syntax</a>
<br><a href="a_double_property.htm#ad" target="_top">ad</a>
<br><a href="a_double_property.htm#value" target="_top">value</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="a_double_property.htm#value.Restriction" target="_top">Restriction</a>
<br><a href="a_double_property.htm#parameter" target="_top">parameter</a>
<br><a href="a_double_property.htm#variable" target="_top">variable</a>
<br><a href="a_double_property.htm#near_equal" target="_top">near_equal</a>
<br><a href="a_double_property.htm#var2par" target="_top">var2par</a>
<br><a href="a_double_property.htm#Example" target="_top">Example</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>d</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i><font color="blue"><span style='white-space: nowrap'>.value()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i><font color="blue"><span style='white-space: nowrap'>.parameter()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>v</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i><font color="blue"><span style='white-space: nowrap'>.variable()<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>e</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i><font color="blue"><span style='white-space: nowrap'>.near_equal(</span></font><i><font color="black"><span style='white-space: nowrap'>aother</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>ap</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i><font color="blue"><span style='white-space: nowrap'>.var2par()<br>
</span></font></code>
<br>
<b><big><a name="ad" id="ad">ad</a></big></b>
<br>
This object has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;a_double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
<br>
<b><big><a name="value" id="value">value</a></big></b>
<br>
The result 
<code><i><font color="black"><span style='white-space: nowrap'>d</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>d</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is the value of 
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
, as a constant function.

<br>
<br>
<big><a name="value.Restriction" id="value.Restriction">Restriction</a></big>
<br>
The object 
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 must not depend on the
<a href="cpp_independent.htm" target="_top"><span style='white-space: nowrap'>independent</span></a>

variables when 
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i><font color="blue"><span style='white-space: nowrap'>.value()</span></font></code>
 is called.
If it does depend on the independent variables,
you will have to wait until the current recording is terminated
before you can access its value; see
<a href="a_double_property.htm#var2par" target="_top"><span style='white-space: nowrap'>var2par</span></a>
 below.

<br>
<br>
<b><big><a name="parameter" id="parameter">parameter</a></big></b>
<br>
The result 
<code><i><font color="black"><span style='white-space: nowrap'>p</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>p</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is true if 
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 represent a constant functions; i.e.,

<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 not depend on the independent variables.

<br>
<br>
<b><big><a name="variable" id="variable">variable</a></big></b>
<br>
The result 
<code><i><font color="black"><span style='white-space: nowrap'>v</span></font></i></code>
 has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It is true if 
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 is not a constant function; i.e.,

<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 depends on the independent variables.

<br>
<br>
<b><big><a name="near_equal" id="near_equal">near_equal</a></big></b>
<br>
The argument 
<code><i><font color="black"><span style='white-space: nowrap'>aother</span></font></i></code>
,
and the result 
<code><i><font color="black"><span style='white-space: nowrap'>e</span></font></i></code>
, have prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;a_double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>aother</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bool&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>e</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
The result is true if 
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 is nearly equal to 
<code><i><font color="black"><span style='white-space: nowrap'>aother</span></font></i></code>
.
To be specific, the result is
<small>@[@

	| d - o | \leq 100 \; \varepsilon \; ( |d| + |o| )

@]@</small>
where 
<code><i><font color="black"><span style='white-space: nowrap'>d</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>o</span></font></i></code>
 are the value corresponding to

<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>aother</span></font></i></code>
 and
<small>@(@
\varepsilon
@)@</small> is machine epsilon corresponding
to the type <code><font color="blue">double</font></code>.

<br>
<br>
<b><big><a name="var2par" id="var2par">var2par</a></big></b>
<br>
The result has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a_double&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ap</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
It has the same value as 
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 and is sure to be a parameter
(
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>
 may or may not be a variable).
This can be useful when you want to access the value of 
<code><i><font color="black"><span style='white-space: nowrap'>ad</span></font></i></code>

while is a variable; <a href="a_double_property.htm#value" target="_top"><span style='white-space: nowrap'>value</span></a>
 above.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
<a href="a_double_property_xam.cpp.htm" target="_top"><span style='white-space: nowrap'>C++</span></a>
,
<a href="a_double_property_xam.py.htm" target="_top"><span style='white-space: nowrap'>Python</span></a>
.


<hr>Input File: lib/cplusplus/a_double.cpp

</body>
</html>
