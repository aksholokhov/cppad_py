<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Reverse Mode AD</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Reverse Mode AD">
<meta name="keywords" id="keywords" content=" reverse mode ad syntax f notation f(x) x(t) s y(t) t g(t) q yq xq example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_py_fun_reverse_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="fun_forward_xam.py.htm" target="_top">Prev</a>
</td><td><a href="fun_reverse_xam.py.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>py_lib</option>
<option>py_fun</option>
<option>py_fun_reverse</option>
</select>
</td>
<td>
<select onchange='choose_down4(this)'>
<option>cppad_py-&gt;</option>
<option>setup.py</option>
<option>library</option>
<option>whats_new_2018</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>py_lib</option>
<option>cpp_lib</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>py_lib-&gt;</option>
<option>py_fun</option>
<option>py_sparse</option>
<option>py_utility</option>
<option>more_py</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>py_fun-&gt;</option>
<option>py_independent</option>
<option>py_abort_recording</option>
<option>py_fun_ctor</option>
<option>py_fun_property</option>
<option>py_fun_new_dynamic</option>
<option>py_fun_jacobian</option>
<option>py_fun_hessian</option>
<option>py_fun_forward</option>
<option>py_fun_reverse</option>
<option>py_fun_optimize</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>py_fun_reverse-&gt;</option>
<option>fun_reverse_xam.py</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>f</option>
<option>Notation</option>
<option>---..f(x)</option>
<option>---..X(t), S</option>
<option>---..Y(t), T</option>
<option>---..G(T)</option>
<option>q</option>
<option>yq</option>
<option>xq</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>Reverse Mode AD</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>xq</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.reverse(</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>yq</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="f" id="f">f</a></big></b>
<br>
This is either a
<a href="py_fun_ctor.htm#Syntax.d_fun" target="_top"><span style='white-space: nowrap'>d_fun</span></a>
 or
<a href="py_fun_ctor.htm#Syntax.a_fun" target="_top"><span style='white-space: nowrap'>a_fun</span></a>
 function object
and is effectively constant; i.e., not changed.

<br>
<br>
<b><big><a name="Notation" id="Notation">Notation</a></big></b>


<br>
<br>
<big><a name="Notation.f(x)" id="Notation.f(x)">f(x)</a></big>
<br>
We use the notation <small>@(@
f: \B{R}^n \rightarrow \B{R}^m
@)@</small>
for the function corresponding to 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.
Note that 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 is the size of <a href="py_fun_ctor.htm#ax" target="_top"><span style='white-space: nowrap'>ax</span></a>

and 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 is the size of <a href="py_fun_ctor.htm#ay" target="_top"><span style='white-space: nowrap'>ay</span></a>

in to the constructor for 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
.

<br>
<br>
<big><a name="Notation.X(t), S" id="Notation.X(t), S">X(t), S</a></big>
<br>
This is the same function as
<a href="py_fun_forward.htm#X(t)" target="_top"><span style='white-space: nowrap'>X(t)</span></a>
 in the previous call to

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.forward</span></font></code>
.
We use <small>@(@
S \in \B{R}^{n \times q}
@)@</small> to denote the Taylor coefficients
of <small>@(@
X(t)
@)@</small>.

<br>
<br>
<big><a name="Notation.Y(t), T" id="Notation.Y(t), T">Y(t), T</a></big>
<br>
This is the same function as
<a href="py_fun_forward.htm#Y(t)" target="_top"><span style='white-space: nowrap'>Y(t)</span></a>
 in the previous call to

<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i><font color="blue"><span style='white-space: nowrap'>.forward</span></font></code>
.
We use <small>@(@
T \in \B{R}^{m \times q}
@)@</small> to denote the Taylor coefficients
of <small>@(@
Y(t)
@)@</small>.
We also use the notation <small>@(@
T(S)
@)@</small> to express the fact that
the Taylor coefficients for <small>@(@
Y(t)
@)@</small> are a function of the
Taylor coefficients of <small>@(@
X(t)
@)@</small>.

<br>
<br>
<big><a name="Notation.G(T)" id="Notation.G(T)">G(T)</a></big>
<br>
We use the notation <small>@(@
G : \B{R}^{m \times p} \rightarrow \B{R}
@)@</small>
for a function that the calling routine chooses.

<br>
<br>
<b><big><a name="q" id="q">q</a></big></b>
<br>
This argument has type <code><font color="blue">int</font></code> and is positive.
It is the number of the Taylor coefficient (for each variable)
that we are computing the derivative with respect to.
It must be greater than zero, and less than or equal
the number of Taylor coefficient stored in 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
; i.e.,
<a href="py_fun_property.htm#size_order" target="_top"><span style='white-space: nowrap'>f.size_order()</span></a>
.

<br>
<br>
<b><big><a name="yq" id="yq">yq</a></big></b>
<br>
If 
<code><i><font color="black"><span style='white-space: nowrap'>f</span></font></i></code>
 is a <code><font color="blue">d_fun</font></code> (<code><font color="blue">a_fun</font></code>) object, 
<code><i><font color="black"><span style='white-space: nowrap'>yq</span></font></i></code>

is a numpy vector with <code><font color="blue">float</font></code> (<code><font color="blue">a_double</font></code>) elements,

<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 rows and 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 columns.
For 
<code><i><font color="black"><span style='white-space: nowrap'>0</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>0</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>yq</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]</span></font></code>
 is the partial derivative of
<small>@(@
G(T)
@)@</small> with respect to the <code><i>k</i></code>-th order Taylor coefficient
for the <code><i>i</i></code>-th component function; i.e.,
the partial derivative of <small>@(@
G(T)
@)@</small> w.r.t. <small>@(@
Y_i^{(k)} (t) / k !
@)@</small>.

<br>
<br>
<b><big><a name="xq" id="xq">xq</a></big></b>
<br>
The result is a numpy vector with <code><font color="blue">float</font></code> (<code><font color="blue">a_double</font></code>) elements,

<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 rows and 
<code><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
 columns.
For 
<code><i><font color="black"><span style='white-space: nowrap'>0</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>0</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;&lt;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>q</span></font></i></code>
,

<code><i><font color="black"><span style='white-space: nowrap'>yq</span></font></i><font color="blue"><span style='white-space: nowrap'>[&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>j</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>k</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;]</span></font></code>
 is the partial derivative of
<small>@(@
G(T(S))
@)@</small> with respect to the <code><i>k</i></code>-th order Taylor coefficient
for the <code><i>j</i></code>-th component function; i.e.,
the partial derivative of
<small>@(@
G(T(S))
@)@</small> w.r.t. <small>@(@
S_j^{(k)} (t) / k !
@)@</small>.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
<a href="fun_reverse_xam.py.htm" target="_top"><span style='white-space: nowrap'>fun_reverse_xam.py</span></a>



<hr>Input File: lib/python/fun_reverse.py

</body>
</html>
