<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>C++: Forward Mode AD: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="C++: Forward Mode AD: Example and Test">
<meta name="keywords" id="keywords" content=" c++: forward mode ad: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_fun_forward_xam.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="cpp_fun_forward.htm" target="_top">Prev</a>
</td><td><a href="cpp_fun_reverse.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>cpp_lib</option>
<option>cpp_fun</option>
<option>cpp_fun_forward</option>
<option>fun_forward_xam.cpp</option>
</select>
</td>
<td>
<select onchange='choose_down4(this)'>
<option>library-&gt;</option>
<option>py_lib</option>
<option>cpp_lib</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cpp_lib-&gt;</option>
<option>a_double</option>
<option>vector</option>
<option>cpp_fun</option>
<option>sparse</option>
<option>cpp_utility</option>
<option>more_cpp</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>cpp_fun-&gt;</option>
<option>cpp_independent</option>
<option>cpp_abort_recording</option>
<option>cpp_fun_ctor</option>
<option>cpp_fun_property</option>
<option>cpp_fun_new_dynamic</option>
<option>cpp_fun_jacobian</option>
<option>cpp_fun_hessian</option>
<option>cpp_fun_forward</option>
<option>cpp_fun_reverse</option>
<option>cpp_fun_optimize</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>cpp_fun_forward-&gt;</option>
<option>fun_forward_xam.cpp</option>
</select>
</td>
<td>fun_forward_xam.cpp</td>
<td>Headings</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>C++: Forward Mode AD: Example and Test</big></big></b></center>
<pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cstdio&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/py/cppad_py.hpp&gt;</font>

<font color="#009900">bool</font> <b><font color="#000000">fun_forward_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>a_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>vec_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>vec_a_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>d_fun<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>a_fun<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// initialize return variable</font></i>
     <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
     <i><font color="#9A1900">// number of dependent and independent variables</font></i>
     <font color="#009900">int</font> n_dep <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
     <font color="#009900">int</font> n_ind <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// create the independent variables ax</font></i>
     <font color="#008080">vec_double</font> <b><font color="#000000">xp</font></b><font color="#990000">(</font>n_ind<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#009900">int</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> n_ind <font color="#990000">;</font> i<font color="#990000">++)</font> <font color="#FF0000">{</font>
          xp<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> i <font color="#990000">+</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <font color="#FF0000">}</font>
     <font color="#008080">vec_a_double</font> ax <font color="#990000">=</font> cppad_py<font color="#990000">::</font><b><font color="#000000">independent</font></b><font color="#990000">(</font>xp<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// create dependent varialbes ay with ay0 = ax0 * ax1</font></i>
     <font color="#008080">a_double</font> ax0 <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
     <font color="#008080">a_double</font> ax1 <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">];</font>
     <font color="#008080">vec_a_double</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>n_dep<font color="#990000">);</font>
     ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> ax0 <font color="#990000">*</font> ax1<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// define af corresponding to f(x) = x0 * x1</font></i>
     <font color="#008080">d_fun</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> f<font color="#990000">.</font><b><font color="#000000">size_order</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// define X(t) = (3 + t, 2 + t)</font></i>
     <i><font color="#9A1900">// it follows that Y(t) = f(X(t)) = (3 + t) * (2 + t)</font></i>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// Y(0) = 6 and p ! = 1</font></i>
     <font color="#009900">int</font> p <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     xp<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">3.0</font><font color="#990000">;</font>
     xp<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
     <font color="#008080">vec_double</font> yp <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font>p<font color="#990000">,</font> xp<font color="#990000">);</font>
     ok  <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> yp<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">6.0</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> f<font color="#990000">.</font><b><font color="#000000">size_order</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// first order Taylor coefficients for X(t)</font></i>
     p <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font>
     xp<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     xp<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// first order Taylor coefficient for Y(t)</font></i>
     <i><font color="#9A1900">// Y'(0) = 3 + 2 = 5 and p ! = 1</font></i>
     yp <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font>p<font color="#990000">,</font> xp<font color="#990000">);</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> yp<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">5.0</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> f<font color="#990000">.</font><b><font color="#000000">size_order</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">2</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// second order Taylor coefficients for X(t)</font></i>
     p <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font>
     xp<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     xp<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">0.0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// second order Taylor coefficient for Y(t)</font></i>
     <i><font color="#9A1900">// Y''(0) = 2.0 and p ! = 2</font></i>
     yp <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font>p<font color="#990000">,</font> xp<font color="#990000">);</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> yp<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     ok <font color="#990000">&amp;=</font> f<font color="#990000">.</font><b><font color="#000000">size_order</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">3</font><font color="#990000">;</font>
     <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
     <font color="#008080">a_fun</font> <b><font color="#000000">af</font></b><font color="#990000">(</font>f<font color="#990000">);</font>
     ok <font color="#990000">&amp;=</font> af<font color="#990000">.</font><b><font color="#000000">size_order</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// zero order forward</font></i>
     <font color="#008080">vec_a_double</font> <b><font color="#000000">axp</font></b><font color="#990000">(</font>n_ind<font color="#990000">),</font> <b><font color="#000000">ayp</font></b><font color="#990000">(</font>n_dep<font color="#990000">);</font>
     p      <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     axp<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">3.0</font><font color="#990000">;</font>
     axp<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font> <font color="#990000">=</font> <font color="#993399">2.0</font><font color="#990000">;</font>
     ayp    <font color="#990000">=</font> af<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font>p<font color="#990000">,</font> axp<font color="#990000">);</font>
     ok     <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> ayp<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">==</font> <font color="#993399">6.0</font><font color="#990000">;</font>
     ok    <font color="#990000">&amp;=</font> af<font color="#990000">.</font><b><font color="#000000">size_order</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">return</font></b><font color="#990000">(</font> ok <font color="#990000">);</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: lib/example/cplusplus/fun_forward_xam.cpp

</body>
</html>
