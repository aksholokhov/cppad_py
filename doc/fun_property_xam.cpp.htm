<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>C++: function Properties: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="C++: function Properties: Example and Test">
<meta name="keywords" id="keywords" content=" c++: function properties: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_fun_property_xam.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="cpp_fun_property.htm" target="_top">Prev</a>
</td><td><a href="cpp_fun_new_dynamic.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>cpp_lib</option>
<option>cpp_fun</option>
<option>cpp_fun_property</option>
<option>fun_property_xam.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_library_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cpp_lib_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cpp_fun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cpp_fun_property_htm.js'></script>
</td>
<td>fun_property_xam.cpp</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>C++: function Properties: Example and Test</big></big></b></center>

<br><pre><tt><b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cstdio&gt;</font>
<b><font color="#000080"># include</font></b> <font color="#FF0000">&lt;cppad/py/cppad_py.hpp&gt;</font>

<font color="#009900">bool</font> <b><font color="#000000">fun_property_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>a_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>vec_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>vec_a_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>d_fun<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>a_fun<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// initialize return variable</font></i>
     <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
     <font color="#009900">int</font> n_ind <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// number of independent variables</font></i>
     <font color="#009900">int</font> n_dep <font color="#990000">=</font> <font color="#993399">2</font><font color="#990000">;</font> <i><font color="#9A1900">// number of dependent variables</font></i>
     <font color="#009900">int</font> n_var <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// phantom variable at address 0</font></i>
     <font color="#009900">int</font> n_op  <font color="#990000">=</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// special operator at beginning</font></i>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// dimension some vectors</font></i>
     <font color="#008080">vec_double</font> <b><font color="#000000">x</font></b><font color="#990000">(</font>n_ind<font color="#990000">);</font>
     <font color="#008080">vec_a_double</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font>n_dep<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// independent variables</font></i>
     x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>            <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     <font color="#008080">vec_a_double</font> ax <font color="#990000">=</font> cppad_py<font color="#990000">::</font><b><font color="#000000">independent</font></b><font color="#990000">(</font>x<font color="#990000">);</font>
     n_var           <font color="#990000">=</font> n_var <font color="#990000">+</font> n_ind<font color="#990000">;</font> <i><font color="#9A1900">// one for each indpendent</font></i>
     n_op            <font color="#990000">=</font> n_op <font color="#990000">+</font> n_ind<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// first dependent variable</font></i>
     ay<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">+</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
     n_var <font color="#990000">=</font> n_var <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// one variable and operator</font></i>
     n_op <font color="#990000">=</font> n_op <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// second dependent variable</font></i>
     <font color="#008080">a_double</font> ax0 <font color="#990000">=</font> ax<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">];</font>
     ay<font color="#990000">[</font><font color="#993399">1</font><font color="#990000">]</font>        <font color="#990000">=</font> ax0<font color="#990000">.</font><b><font color="#000000">sin</font></b><font color="#990000">();</font>
     n_var        <font color="#990000">=</font> n_var <font color="#990000">+</font> <font color="#993399">2</font><font color="#990000">;</font> <i><font color="#9A1900">// two varialbes, one operator</font></i>
     n_op         <font color="#990000">=</font> n_op <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// define f(x) = y</font></i>
     <font color="#008080">d_fun</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
     n_op     <font color="#990000">=</font> n_op <font color="#990000">+</font> <font color="#993399">1</font><font color="#990000">;</font> <i><font color="#9A1900">// speical operator at end</font></i>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// check f properties</font></i>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_domain</font></b><font color="#990000">()</font> <font color="#990000">==</font> n_ind<font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_range</font></b><font color="#990000">()</font>  <font color="#990000">==</font> n_dep<font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">()</font>    <font color="#990000">==</font> n_var<font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_op</font></b><font color="#990000">()</font>     <font color="#990000">==</font> n_op<font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_order</font></b><font color="#990000">()</font>  <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// compute zero order Taylor coefficients</font></i>
     <font color="#008080">vec_double</font> y  <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_order</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">1</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// create an a_fun object</font></i>
     <font color="#008080">a_fun</font> <b><font color="#000000">af</font></b><font color="#990000">(</font>f<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
     <i><font color="#9A1900">// check af properties</font></i>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> af<font color="#990000">.</font><b><font color="#000000">size_domain</font></b><font color="#990000">()</font> <font color="#990000">==</font> n_ind<font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> af<font color="#990000">.</font><b><font color="#000000">size_range</font></b><font color="#990000">()</font>  <font color="#990000">==</font> n_dep<font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> af<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">()</font>    <font color="#990000">==</font> n_var<font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> af<font color="#990000">.</font><b><font color="#000000">size_op</font></b><font color="#990000">()</font>     <font color="#990000">==</font> n_op<font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> af<font color="#990000">.</font><b><font color="#000000">size_order</font></b><font color="#990000">()</font>  <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
     <i><font color="#9A1900">// The empty function</font></i>
     ax<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
     ay<font color="#990000">.</font><b><font color="#000000">resize</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font>
     f <font color="#990000">=</font> <b><font color="#000000">d_fun</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_domain</font></b><font color="#990000">()</font> <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_range</font></b><font color="#990000">()</font>  <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_var</font></b><font color="#990000">()</font>    <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_op</font></b><font color="#990000">()</font>     <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     ok <font color="#990000">=</font> ok <font color="#990000">&amp;&amp;</font> f<font color="#990000">.</font><b><font color="#000000">size_order</font></b><font color="#990000">()</font>  <font color="#990000">==</font> <font color="#993399">0</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">return</font></b><font color="#990000">(</font> ok  <font color="#990000">);</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/cplusplus/fun_property_xam.cpp

</body>
</html>
