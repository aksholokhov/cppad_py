<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>C++: to_json: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="C++: to_json: Example and Test">
<meta name="keywords" id="keywords" content=" c++: to_json: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_fun_from_json_xam.cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="fun_to_json_xam.cpp.htm" target="_top">Prev</a>
</td><td><a href="sparse.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>cpp_lib</option>
<option>cpp_fun</option>
<option>cpp_fun_json</option>
<option>fun_from_json_xam.cpp</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_library_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cpp_lib_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cpp_fun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cpp_fun_json_htm.js'></script>
</td>
<td>fun_from_json_xam.cpp</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>C++: to_json: Example and Test</big></big></b></center>

<br><pre><tt><font color="#009900">bool</font> <b><font color="#000000">from_json_xam</font></b><font color="#990000">(</font><font color="#009900">void</font><font color="#990000">)</font> <font color="#FF0000">{</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>a_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>vec_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>vec_a_double<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>d_fun<font color="#990000">;</font>
     <b><font color="#0000FF">using</font></b> cppad_py<font color="#990000">::</font>a_fun<font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// initialize return variable</font></i>
     <font color="#009900">bool</font> ok <font color="#990000">=</font> <b><font color="#0000FF">true</font></b><font color="#990000">;</font>
     <i><font color="#9A1900">// ----------------------------------------------------------------------</font></i>
     <i><font color="#9A1900">// AD graph repersentation of f(x) = sin(x) / cos(x)</font></i>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// node_1 : x[0]</font></i>
     <i><font color="#9A1900">// node_2 : sin( x[0] )</font></i>
     <i><font color="#9A1900">// node_3 : cos( x[0] )</font></i>
     <i><font color="#9A1900">// node_4 : sin( x[0] ) / cos( x[0] )</font></i>
     <i><font color="#9A1900">// y[0]   = sin( x[0] ) / cos( x[0] )</font></i>
     <i><font color="#9A1900">// use single quote to avodi having to escape double quote</font></i>
     std<font color="#990000">::</font><font color="#008080">string</font> json <font color="#990000">=</font>
          <font color="#FF0000">"{</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"    'function_name' : 'tangent function',</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"    'op_define_vec' : [ 3, [</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"         { 'op_code':1, 'name':'sin', 'n_arg':1 } ,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"         { 'op_code':2, 'name':'cos', 'n_arg':1 } ,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"         { 'op_code':3, 'name':'div', 'n_arg':2 } ]</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"    ],</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"    'n_dynamic_ind'  : 0,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"    'n_variable_ind' : 1,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"    'constant_vec'   : [ 0, [ ] ],</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"    'op_usage_vec'   : [ 3, [</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"         [ 1, 1 ]   ,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>  <i><font color="#9A1900">// node_2: sin(x[0])</font></i>
          <font color="#FF0000">"         [ 2, 1 ]   ,</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>  <i><font color="#9A1900">// node_3: cos(x[0])</font></i>
          <font color="#FF0000">"         [ 3, 2, 3] ]</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>  <i><font color="#9A1900">// node_4: sin(x[0]) / cos(x[0])</font></i>
          <font color="#FF0000">"    ],</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"    'dependent_vec' : [ 1, [4] ]</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font>
          <font color="#FF0000">"}</font><font color="#CC33CC">\n</font><font color="#FF0000">"</font><font color="#990000">;</font>
     <i><font color="#9A1900">// convert the single quote to double quote</font></i>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> i <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> i <font color="#990000">&lt;</font> json<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font> <font color="#990000">++</font>i<font color="#990000">)</font>
          <b><font color="#0000FF">if</font></b><font color="#990000">(</font> json<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">==</font> <font color="#FF0000">'</font><font color="#CC33CC">\'</font><font color="#FF0000">'</font> <font color="#990000">)</font>
               json<font color="#990000">[</font>i<font color="#990000">]</font> <font color="#990000">=</font> <font color="#FF0000">'"'</font><font color="#990000">;</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// convert json to a fucntion object</font></i>
     <font color="#008080">vec_a_double</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">),</font> <b><font color="#000000">ay</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">);</font> <i><font color="#9A1900">// construct an empty function</font></i>
     <font color="#008080">d_fun</font> <b><font color="#000000">f</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> ay<font color="#990000">);</font>
     f<font color="#990000">.</font><b><font color="#000000">from_json</font></b><font color="#990000">(</font>json<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// compute y = f(x)</font></i>
     <font color="#008080">vec_double</font> <b><font color="#000000">x</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">),</font> <b><font color="#000000">y</font></b><font color="#990000">(</font><font color="#993399">1</font><font color="#990000">);</font>
     x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>  <font color="#990000">=</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     y     <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
     <i><font color="#9A1900">//</font></i>
     <i><font color="#9A1900">// check the function value</font></i>
     <font color="#009900">double</font> eps99     <font color="#990000">=</font> std<font color="#990000">::</font>numeric_limits<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;::</font><b><font color="#000000">epsilon</font></b><font color="#990000">();</font>
     <font color="#009900">double</font> check     <font color="#990000">=</font> std<font color="#990000">::</font><b><font color="#000000">tan</font></b><font color="#990000">(</font>x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>
     <font color="#009900">double</font> rel_error <font color="#990000">=</font> y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">/</font> check <font color="#990000">-</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     ok              <font color="#990000">&amp;=</font> std<font color="#990000">::</font><b><font color="#000000">fabs</font></b><font color="#990000">(</font> rel_error <font color="#990000">)</font> <font color="#990000">&lt;</font> eps99<font color="#990000">;</font>
    <i><font color="#9A1900">//</font></i>
     <b><font color="#0000FF">return</font></b> ok<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>

<hr>Input File: example/cplusplus/fun_json_xam.cpp

</body>
</html>
