<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>C++: from_json: Example and Test</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="C++: from_json: Example and Test">
<meta name="keywords" id="keywords" content=" c++: from_json: example test ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_fun_from_json_xam.py_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="fun_to_json_xam.py.htm" target="_top">Prev</a>
</td><td><a href="py_sparse.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>py_lib</option>
<option>py_fun</option>
<option>py_fun_json</option>
<option>fun_from_json_xam.py</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_library_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_py_lib_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_py_fun_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_py_fun_json_htm.js'></script>
</td>
<td>fun_from_json_xam.py</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>C++: from_json: Example and Test</big></big></b></center>

<br><pre style='display:inline'><tt>
<b><font color="#0000FF">def</font></b> <b><font color="#000000">from_json_xam</font></b><font color="#990000">()</font> <font color="#990000">:</font>
     <i><font color="#9A1900">#</font></i>
     <b><font color="#000080">import</font></b> numpy
     <b><font color="#000080">import</font></b> cppad_py
     <b><font color="#000080">import</font></b> math
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># initialize return variable</font></i>
     ok <font color="#990000">=</font> True
     <i><font color="#9A1900"># ---------------------------------------------------------------------</font></i>
     <i><font color="#9A1900"># AD graph repersentation of f(x) = sin(x) / cos(x)</font></i>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># node_1 : x[0]</font></i>
     <i><font color="#9A1900"># node_2 : sin( x[0] )</font></i>
     <i><font color="#9A1900"># node_3 : cos( x[0] )</font></i>
     <i><font color="#9A1900"># node_4 : sin( x[0] ) / cos( x[0] )</font></i>
     <i><font color="#9A1900"># y[0]   = sin( x[0] ) / cos( x[0] )</font></i>
     json <font color="#990000">=</font><font color="#FF0000"> '''</font>
<font color="#FF0000">          {</font>
<font color="#FF0000">               "function_name" : "tangent function",</font>
<font color="#FF0000">               "op_define_vec" : [ 3, [</font>
<font color="#FF0000">                    { "op_code":1, "name":"sin", "n_arg":1 } ,</font>
<font color="#FF0000">                    { "op_code":2, "name":"cos", "n_arg":1 } ,</font>
<font color="#FF0000">                    { "op_code":3, "name":"div", "n_arg":2 } ]</font>
<font color="#FF0000">               ],</font>
<font color="#FF0000">               "n_dynamic_ind"  : 0,</font>
<font color="#FF0000">               "n_variable_ind" : 1,</font>
<font color="#FF0000">               "constant_vec"   : [ 0, [ ] ],</font>
<font color="#FF0000">               "op_usage_vec"   : [ 3, [</font>
<font color="#FF0000">                    [ 1, 1 ]   ,</font>
<font color="#FF0000">                    [ 2, 1 ]   ,</font>
<font color="#FF0000">                    [ 3, 2, 3] ]</font>
<font color="#FF0000">               ],</font>
<font color="#FF0000">               "dependent_vec" : [ 1, [4] ]</font>
<font color="#FF0000">          };</font>
<font color="#FF0000">     '''</font>
     <i><font color="#9A1900"># convert json to a fucntion object</font></i>
     f <font color="#990000">=</font> cppad_py<font color="#990000">.</font><b><font color="#000000">d_fun</font></b><font color="#990000">();</font>
     f<font color="#990000">.</font><b><font color="#000000">from_json</font></b><font color="#990000">(</font>json<font color="#990000">);</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># compute y = f(x)</font></i>
     x  <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">array</font></b><font color="#990000">(</font> <font color="#990000">[</font> <font color="#993399">1.0</font> <font color="#990000">]</font> <font color="#990000">);</font>
     y  <font color="#990000">=</font> f<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">);</font>
     <i><font color="#9A1900">#</font></i>
     <i><font color="#9A1900"># check the function value</font></i>
     eps99     <font color="#990000">=</font> <font color="#993399">99.0</font> <font color="#990000">*</font> numpy<font color="#990000">.</font><b><font color="#000000">finfo</font></b><font color="#990000">(</font>float<font color="#990000">).</font>eps
     check     <font color="#990000">=</font> math<font color="#990000">.</font><b><font color="#000000">tan</font></b><font color="#990000">(</font>x<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]);</font>
     rel_error <font color="#990000">=</font> y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font> <font color="#990000">/</font> check <font color="#990000">-</font> <font color="#993399">1.0</font><font color="#990000">;</font>
     ok       <font color="#990000">&amp;=</font> <b><font color="#000000">abs</font></b><font color="#990000">(</font> rel_error <font color="#990000">)</font> <font color="#990000">&lt;</font> eps99<font color="#990000">;</font>
     <i><font color="#9A1900">#</font></i>
     <b><font color="#0000FF">return</font></b> ok
<i><font color="#9A1900"># END_TO_JSON_XAM</font></i>
<i><font color="#9A1900">#</font></i>
<i><font color="#9A1900"># $begin fun_from_json_xam.py$$ $newlinech #$$</font></i>
<i><font color="#9A1900"># $spell</font></i>
<i><font color="#9A1900">#     json</font></i>
<i><font color="#9A1900"># $$</font></i>
<i><font color="#9A1900"># $section C++: from_json: Example and Test$$</font></i>
<i><font color="#9A1900"># $srcthisfile|0|# BEGIN_FROM_JSON_XAM|</font></i></tt></pre>

<hr>Input File: example/python/fun_json_xam.py

</body>
</html>
