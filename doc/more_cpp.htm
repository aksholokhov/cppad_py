<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Steps To Add More C++ Functions</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Steps To Add More C++ Functions">
<meta name="keywords" id="keywords" content=" steps to add more c++ functions purpose include file independent new_dynamic documentation example implementation testing ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_more_cpp_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="error_message_xam.py.htm" target="_top">Prev</a>
</td><td><a href="whats_new_2018.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>cpp_lib</option>
<option>more_cpp</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>cppad_py-&gt;</option>
<option>setup.py</option>
<option>library</option>
<option>whats_new_2018</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>library-&gt;</option>
<option>py_lib</option>
<option>cpp_lib</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>cpp_lib-&gt;</option>
<option>a_double</option>
<option>vector</option>
<option>cpp_fun</option>
<option>sparse</option>
<option>cpp_utility</option>
<option>more_cpp</option>
</select>
</td>
<td>more_cpp</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Purpose</option>
<option>Include File</option>
<option>---..independent</option>
<option>---..new_dynamic</option>
<option>Documentation</option>
<option>---..independent</option>
<option>---..new_dynamic</option>
<option>---..Example</option>
<option>Implementation</option>
<option>---..independent</option>
<option>---..new_dynamic</option>
<option>Example</option>
<option>Testing</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>Steps To Add More C++ Functions</big></big></b></center>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This section outlines the steps for adding more CppAD functionality
to cppad_py.
This is done by example showing how the <a href="cpp_fun_new_dynamic.htm" target="_top"><span style='white-space: nowrap'>cpp_fun_new_dynamic</span></a>
 was added.
This example case was chosen because it required both changing one
C++ function, <a href="cpp_independent.htm" target="_top"><span style='white-space: nowrap'>cpp_independent</span></a>
,
and adding a new C++ function, <a href="cpp_fun_new_dynamic.htm" target="_top"><span style='white-space: nowrap'>cpp_fun_new_dynamic</span></a>
.

<br>
<br>
<b><big><a name="Include File" id="Include File">Include File</a></big></b>


<br>
<br>
<big><a name="Include File.independent" id="Include File.independent">independent</a></big>
<br>
The include file <code><font color="blue">include/cppad/py/fun.hpp</font></code>
was edited to add the following prototype:
<pre><tt>     CPPAD_PY_LIB_PUBLIC
     std<font color="#990000">::</font><font color="#008080">vector&lt;a_double&gt;</font> <b><font color="#000000">independent</font></b><font color="#990000">(</font>
          <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> x<font color="#990000">,</font> <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> dynamic
     <font color="#990000">);</font></tt></pre>
The <code><font color="blue">independent</font></code> function is not part of the
<code><font color="blue">d_fun</font></code> or <code><font color="blue">a_fun</font></code> class, but
calling it is the first step in creating these objects.
This is why its prototype is in the <code><font color="blue">fun.hpp</font></code> file.

<br>
<br>
<big><a name="Include File.new_dynamic" id="Include File.new_dynamic">new_dynamic</a></big>
<br>
The include file <code><font color="blue">include/cppad/py/fun.hpp</font></code>
was edited to add the following member function to <code><font color="blue">d_fun</font></code>:
<pre style='display:inline'><tt>
    <font color="#009900">void</font> <b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> dynamic<font color="#990000">);</font>
</tt></pre>
The following member function was added to <code><font color="blue">a_fun</font></code>:
<pre style='display:inline'><tt>
    <font color="#009900">void</font> <b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font>a_double<font color="#990000">&gt;&amp;</font> adynamic<font color="#990000">);</font>
</tt></pre>
<br>
<b><big><a name="Documentation" id="Documentation">Documentation</a></big></b>


<br>
<br>
<big><a name="Documentation.independent" id="Documentation.independent">independent</a></big>
<br>
The C++ file <code><font color="blue">lib/cplusplus/fun.cpp</font></code>
was edited to add the following syntax documentation:

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a_both</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;cppad_py::independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
and the corresponding return value was documented; see
<a href="cpp_independent.htm#a_both" target="_top"><span style='white-space: nowrap'>a_both</span></a>
.

<br>
<br>
<big><a name="Documentation.new_dynamic" id="Documentation.new_dynamic">new_dynamic</a></big>
<br>
The <a href="cpp_fun_new_dynamic.htm" target="_top"><span style='white-space: nowrap'>cpp_fun_new_dynamic</span></a>
 documentation was added.

<br>
<br>
<big><a name="Documentation.Example" id="Documentation.Example">Example</a></big>
<br>
The corresponding example file was added to the documentation,
below the <a href="cpp_independent.htm" target="_top"><span style='white-space: nowrap'>cpp_independent</span></a>
 section, using the OMhelp commands:
<code><font color="blue">
	$children%
		lib/example/cplusplus/fun_dynamic_xam.cpp
	%$$
</font></code>
In addition, a reference to this example was added under the
<a href="cpp_independent.htm#Example" target="_top"><span style='white-space: nowrap'>example</span></a>
 heading in the <code><font color="blue">independent</font></code>
documentation.

<br>
<br>
<b><big><a name="Implementation" id="Implementation">Implementation</a></big></b>


<br>
<br>
<big><a name="Implementation.independent" id="Implementation.independent">independent</a></big>
<br>
The following function was added to the <code><font color="blue">lib/cplusplus/fun.cpp</font></code> file:
<pre><tt>std<font color="#990000">::</font><font color="#008080">vector&lt;a_double&gt;</font> <b><font color="#000000">independent</font></b><font color="#990000">(</font>
     <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> x       <font color="#990000">,</font>
     <b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> dynamic <font color="#990000">)</font>
<font color="#FF0000">{</font>    <b><font color="#0000FF">using</font></b> CppAD<font color="#990000">::</font>AD<font color="#990000">;</font>
     <font color="#008080">size_t</font> nx <font color="#990000">=</font> x<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
     <font color="#008080">size_t</font> nd <font color="#990000">=</font> dynamic<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">();</font>
     CppAD<font color="#990000">::</font><font color="#008080">vector&lt; AD&lt;double&gt; &gt;</font> <b><font color="#000000">ax</font></b><font color="#990000">(</font>nx<font color="#990000">),</font> <b><font color="#000000">adynamic</font></b><font color="#990000">(</font>nd<font color="#990000">);</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nx<font color="#990000">;</font> j<font color="#990000">++)</font>
          ax<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> x<font color="#990000">[</font>j<font color="#990000">];</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nd<font color="#990000">;</font> j<font color="#990000">++)</font>
          adynamic<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font> dynamic<font color="#990000">[</font>j<font color="#990000">];</font>
     <font color="#008080">size_t</font> abort_op_index <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font>
     <font color="#008080">size_t</font> record_compare <font color="#990000">=</font> <b><font color="#0000FF">false</font></b><font color="#990000">;</font>
     CppAD<font color="#990000">::</font><b><font color="#000000">Independent</font></b><font color="#990000">(</font>ax<font color="#990000">,</font> abort_op_index<font color="#990000">,</font> record_compare<font color="#990000">,</font> adynamic<font color="#990000">);</font>
     std<font color="#990000">::</font><font color="#008080">vector&lt;a_double&gt;</font> <b><font color="#000000">a_both</font></b><font color="#990000">(</font>nx <font color="#990000">+</font> nd<font color="#990000">);</font>
     <i><font color="#9A1900">// use a_double( *AD&lt;double&gt; ) constructor in these assignment loops</font></i>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nx<font color="#990000">;</font> j<font color="#990000">++)</font>
          a_both<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">=</font>  <font color="#990000">&amp;</font>ax<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">;</font>
     <b><font color="#0000FF">for</font></b><font color="#990000">(</font><font color="#008080">size_t</font> j <font color="#990000">=</font> <font color="#993399">0</font><font color="#990000">;</font> j <font color="#990000">&lt;</font> nd<font color="#990000">;</font> j<font color="#990000">++)</font>
          a_both<font color="#990000">[</font>nx <font color="#990000">+</font> j<font color="#990000">]</font> <font color="#990000">=</font>  <font color="#990000">&amp;</font>adynamic<font color="#990000">[</font>j<font color="#990000">]</font> <font color="#990000">;</font>
     <b><font color="#0000FF">return</font></b> a_both<font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
<br>
<big><a name="Implementation.new_dynamic" id="Implementation.new_dynamic">new_dynamic</a></big>
<br>
The following function
was added to the <code><font color="blue">lib/cplusplus/fun.cpp</font></code> file:
<pre><tt><font color="#009900">void</font> d_fun<font color="#990000">::</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font><font color="#009900">double</font><font color="#990000">&gt;&amp;</font> dynamic<font color="#990000">)</font>
<font color="#FF0000">{</font>    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> dynamic<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">!=</font> ptr_<font color="#990000">-&gt;</font><b><font color="#000000">size_dyn_ind</font></b><font color="#990000">()</font> <font color="#990000">)</font>
          <b><font color="#000000">error_message</font></b><font color="#990000">(</font><font color="#FF0000">"cppad_py::d_fun::new_dynamic dynamic.size() error"</font><font color="#990000">);</font>
     ptr_<font color="#990000">-&gt;</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>dynamic<font color="#990000">);</font>
     <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font>
<font color="#009900">void</font> a_fun<font color="#990000">::</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font><b><font color="#0000FF">const</font></b> std<font color="#990000">::</font>vector<font color="#990000">&lt;</font>a_double<font color="#990000">&gt;&amp;</font> adynamic<font color="#990000">)</font>
<font color="#FF0000">{</font>    <b><font color="#0000FF">if</font></b><font color="#990000">(</font> adynamic<font color="#990000">.</font><b><font color="#000000">size</font></b><font color="#990000">()</font> <font color="#990000">!=</font> a_ptr_<font color="#990000">-&gt;</font><b><font color="#000000">size_dyn_ind</font></b><font color="#990000">()</font> <font color="#990000">)</font>
          <b><font color="#000000">error_message</font></b><font color="#990000">(</font><font color="#FF0000">"cppad_py::a_fun::jacobian adynamic.size() error"</font><font color="#990000">);</font>
     std<font color="#990000">::</font><font color="#008080">vector&lt; CppAD::AD&lt;double&gt; &gt;</font> au <font color="#990000">=</font> <b><font color="#000000">vec2cppad_double</font></b><font color="#990000">(</font>adynamic<font color="#990000">);</font>
     a_ptr_<font color="#990000">-&gt;</font><b><font color="#000000">new_dynamic</font></b><font color="#990000">(</font>au<font color="#990000">);</font>
     <b><font color="#0000FF">return</font></b><font color="#990000">;</font>
<font color="#FF0000">}</font></tt></pre>
A similar function was added to the <code><font color="blue">a_fun</font></code> class.

<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
The file <code><font color="blue">lib/example/cplusplus/fun_dynamic_xam.cpp</font></code> was added
with the following contents:
<a href="fun_dynamic_xam.cpp.htm" target="_top"><span style='white-space: nowrap'>fun_dynamic_xam.cpp</span></a>
.
In addition, in the file <code><font color="blue">lib/example/cplusplus/check_all.cpp</font></code>,
<code><font color="blue">%
	extern bool fun_optimize_xam(void);
%</font></code>
was added to the external declarations and
<code><font color="blue">%
	   ok &amp;= Run( fun_optimize_xam,          &quot;fun_optimize_xam&quot;        );
%</font></code>
was added to the main program.

<br>
<br>
<b><big><a name="Testing" id="Testing">Testing</a></big></b>
<br>
You must do a git add for all of the new files before running
<code><font color="blue">bin/check_all.sh</font></code>.
After all the C++ changes above were implemented,
<code><font color="blue">bin/check_all.sh</font></code> was run and the changes were made
until the warnings and errors were fixed.
The command
<code><font color='blue'><pre style='display:inline'> 
     grep 'fun_dynamic_xam' check_all.log
</pre></font></code>
was used to make sure that the new C++ example / test was run.
Note that if a particular step in <code><font color="blue">bin/check_all.sh</font></code> is failing,
you can just re-run that step to see if a particular fix works.
Once the C++ tests were working, the changes where checked into using
<code><font color="blue">git</font></code>.


<hr>Input File: lib/cplusplus/more_cpp.omh

</body>
</html>
