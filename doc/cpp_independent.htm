<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>Declare Independent Variables and Start Recording</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="Declare Independent Variables and Start Recording">
<meta name="keywords" id="keywords" content=" declare independent variables start recording syntax purpose x dynamic ax a_both example ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_cpp_independent_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://github.com/bradbell/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="cpp_fun.htm" target="_top">Prev</a>
</td><td><a href="fun_dynamic_xam.cpp.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>library</option>
<option>cpp_lib</option>
<option>cpp_fun</option>
<option>cpp_independent</option>
</select>
</td>
<td>
<select onchange='choose_down4(this)'>
<option>cppad_py-&gt;</option>
<option>setup.py</option>
<option>library</option>
<option>whats_new_2018</option>
</select>
</td>
<td>
<select onchange='choose_down3(this)'>
<option>library-&gt;</option>
<option>py_lib</option>
<option>cpp_lib</option>
</select>
</td>
<td>
<select onchange='choose_down2(this)'>
<option>cpp_lib-&gt;</option>
<option>a_double</option>
<option>vector</option>
<option>cpp_fun</option>
<option>sparse</option>
<option>cpp_utility</option>
<option>more_cpp</option>
</select>
</td>
<td>
<select onchange='choose_down1(this)'>
<option>cpp_fun-&gt;</option>
<option>cpp_independent</option>
<option>cpp_abort_recording</option>
<option>cpp_fun_ctor</option>
<option>cpp_fun_property</option>
<option>cpp_fun_new_dynamic</option>
<option>cpp_fun_jacobian</option>
<option>cpp_fun_hessian</option>
<option>cpp_fun_forward</option>
<option>cpp_fun_reverse</option>
<option>cpp_fun_optimize</option>
</select>
</td>
<td>
<select onchange='choose_down0(this)'>
<option>cpp_independent-&gt;</option>
<option>fun_dynamic_xam.cpp</option>
</select>
</td>
<td>
<select onchange='choose_current0(this)'>
<option>Headings-&gt;</option>
<option>Syntax</option>
<option>Purpose</option>
<option>x</option>
<option>dynamic</option>
<option>ax</option>
<option>a_both</option>
<option>Example</option>
</select>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>Declare Independent Variables and Start Recording</big></big></b></center>
<br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;cppad_py::independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>

<code><i><font color="black"><span style='white-space: nowrap'>a_both</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;cppad_py::independent(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This starts recording <a href="a_double.htm" target="_top"><span style='white-space: nowrap'>a_double</span></a>
 operations.
This recording is terminated, and the information is stored,
by calling the <a href="cpp_fun_ctor.htm" target="_top"><span style='white-space: nowrap'>d_fun&nbsp;constructor</span></a>
.
It can be terminated, and the information is lost,
by calling <a href="cpp_abort_recording.htm" target="_top"><span style='white-space: nowrap'>abort_recording</span></a>
.

<br>
<br>
<b><big><a name="x" id="x">x</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;vec_double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its specifies the number of independent variables
and their values during the recording.
We use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>nx</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>

to denote the number of independent variables.

<br>
<br>
<b><big><a name="dynamic" id="dynamic">dynamic</a></big></b>
<br>
This argument has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;vec_double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
Its specifies the number of independent dynamic parameters
and their values during the recording.
We use the notation 
<code><i><font color="black"><span style='white-space: nowrap'>nd</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>.size()</span></font></code>

to denote the number of independent variables.

<br>
<br>
<b><big><a name="ax" id="ax">ax</a></big></b>
<br>
This result has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vec_a_double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the vector of independent variables.
It has size 
<code><i><font color="black"><span style='white-space: nowrap'>nx</span></font></i></code>
 and for

<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0</span></font></code>
 to 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>


<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
<br>
<b><big><a name="a_both" id="a_both">a_both</a></big></b>
<br>
this result has prototype

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vec_a_double&amp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a_both</span></font></i><font color="blue"><span style='white-space: nowrap'><br>
</span></font></code>
and is the vector of both the independent variables
and independent dynamic parameters.
It has size 
<code><i><font color="black"><span style='white-space: nowrap'>nx</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>nd</span></font></i></code>
.
For 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0</span></font></code>
 to 
<code><i><font color="black"><span style='white-space: nowrap'>nx</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>


<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a_both</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
is the <code><i>i</i></code>-th independent variable.
For 
<code><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;0</span></font></code>
 to 
<code><i><font color="black"><span style='white-space: nowrap'>nd</span></font></i><font color="blue"><span style='white-space: nowrap'>-1</span></font></code>


<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>a_both</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>nx</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;+&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]&nbsp;==&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>dynamic</span></font></i><font color="blue"><span style='white-space: nowrap'>[</span></font><i><font color="black"><span style='white-space: nowrap'>i</span></font></i><font color="blue"><span style='white-space: nowrap'>]<br>
</span></font></code>
is the <code><i>i</i></code>-th independent dynamic parameter.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>
<br>
Most of the c++ <code><font color="blue">d_fun</font></code> examples use the 
<code><i><font color="black"><span style='white-space: nowrap'>ax</span></font></i></code>

return syntax.
The <a href="fun_dynamic_xam.cpp.htm" target="_top"><span style='white-space: nowrap'>fun_dynamic_xam.cpp</span></a>
 example uses the 
<code><i><font color="black"><span style='white-space: nowrap'>a_both</span></font></i></code>

return syntax.


<hr>Input File: lib/cplusplus/fun.cpp

</body>
</html>
