<html>
<script type='text/x-mathjax-config'>
MathJax.Hub.Config({
  tex2jax: {
    inlineMath:  [ ['@(@','@)@'] ] ,
    displayMath: [ ['@[@','@]@'] ]
  }
});
</script>
<script type='text/javascript' src=
'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=default'
>
</script>
<head>
<title>A Helper Class That Defines Functions Needed for Optimization</title>
<meta http-equiv='Content-Type' content='text/html' charset='utf-8'>
<meta name="description" id="description" content="A Helper Class That Defines Functions Needed for Optimization">
<meta name="keywords" id="keywords" content=" helper class that defines functions needed optimization syntax purpose objective_ad constraint_ad optimize_fun objective_fun objective_grad objective_hess constraint_fun constraint_jac constraint_hess example source code ">
<style type='text/css'>
body { color : black }
body { background-color : white }
A:link { color : blue }
A:visited { color : purple }
A:active { color : purple }
</style>
<script type='text/javascript' language='JavaScript' src='_numeric_optimize_fun_class_htm.js'>
</script>
</head>
<body>
<table><tr>
<td>
<a href="https://bradbell.github.io/cppad_py" target="_top"><img border="0" src="_image.gif"></a>
</td>
<td><a href="numeric_runge4_multi_step_xam.py.htm" target="_top">Prev</a>
</td><td><a href="numeric_optimize_fun_xam.py.htm" target="_top">Next</a>
</td><td>
<select onchange='choose_across0(this)'>
<option>Index-&gt;</option>
<option>contents</option>
<option>reference</option>
<option>index</option>
<option>search</option>
<option>external</option>
</select>
</td>
<td>
<select onchange='choose_up0(this)'>
<option>Up-&gt;</option>
<option>cppad_py</option>
<option>numeric_xam</option>
<option>numeric_optimize_fun_class</option>
</select>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_cppad_py_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_numeric_xam_htm.js'></script>
</td>
<td>
<script type='text/javascript' language='JavaScript' src='_childtable_numeric_optimize_fun_class_htm.js'></script>
</td>
</tr></table><br>
@(@\newcommand{\B}[1]{ {\bf #1} }
\newcommand{\R}[1]{ {\rm #1} }@)@<center><b><big><big>A Helper Class That Defines Functions Needed for Optimization</big></big></b></center>

<br><a href="numeric_optimize_fun_class.htm#Syntax" target="_top">Syntax</a>
<br><a href="numeric_optimize_fun_class.htm#Purpose" target="_top">Purpose</a>
<br><a href="numeric_optimize_fun_class.htm#objective_ad" target="_top">objective_ad</a>
<br><a href="numeric_optimize_fun_class.htm#constraint_ad" target="_top">constraint_ad</a>
<br><a href="numeric_optimize_fun_class.htm#optimize_fun" target="_top">optimize_fun</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="numeric_optimize_fun_class.htm#optimize_fun.objective_fun" target="_top">objective_fun</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="numeric_optimize_fun_class.htm#optimize_fun.objective_grad" target="_top">objective_grad</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="numeric_optimize_fun_class.htm#optimize_fun.objective_hess" target="_top">objective_hess</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="numeric_optimize_fun_class.htm#optimize_fun.constraint_fun" target="_top">constraint_fun</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="numeric_optimize_fun_class.htm#optimize_fun.constraint_jac" target="_top">constraint_jac</a>
<br>&#160;&#160;&#160;&#160;&#160;<a href="numeric_optimize_fun_class.htm#optimize_fun.constraint_hess" target="_top">constraint_hess</a>
<br><a href="numeric_optimize_fun_class.htm#Example" target="_top">Example</a>
<br><a href="numeric_optimize_fun_class.htm#Source Code" target="_top">Source&nbsp;Code</a>
<br><br>
<b><big><a name="Syntax" id="Syntax">Syntax</a></big></b>

<br>

<code><i><font color="black"><span style='white-space: nowrap'>optimize_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;optimize_fun_class(</span></font><i><font color="black"><span style='white-space: nowrap'>objective_ad</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>constraint_ad</span></font></i><font color="blue"><span style='white-space: nowrap'>)</span></font></code>


<br>
<br>
<b><big><a name="Purpose" id="Purpose">Purpose</a></big></b>
<br>
This class is an aid solving optimization problems of the form
<small>@[@

	\begin{array}{rl}
	{\rm minimize}       & f(x) \; {\rm w.r.t} \; x \\
	{\rm subject \; to}  & a \leq g(x) \leq b \\
	\end{array}

@]@</small>
where <small>@(@
x
@)@</small> is a vector,
<small>@(@
f(x)
@)@</small> is a scalar, and
<small>@(@
a, g(x), b
@)@</small> are all vectors with the same length.
We use <small>@(@
n
@)@</small>, <small>@(@
m
@)@</small> for the length of the vectors
<small>@(@
x
@)@</small> and <small>@(@
g(x)
@)@</small> respectively.

<br>
<br>
<b><big><a name="objective_ad" id="objective_ad">objective_ad</a></big></b>
<br>
This is a <a href="py_fun_ctor.htm#Syntax.d_fun" target="_top"><span style='white-space: nowrap'>d_fun</span></a>

representation of the function <small>@(@
f(x)
@)@</small>.

<br>
<br>
<b><big><a name="constraint_ad" id="constraint_ad">constraint_ad</a></big></b>
<br>
This is a <code><font color="blue">d_fun</font></code> representation of the function <small>@(@
g(x)
@)@</small>.

<br>
<br>
<b><big><a name="optimize_fun" id="optimize_fun">optimize_fun</a></big></b>
<br>
This class object has the following functions defined:

<br>
<br>
<big><a name="optimize_fun.objective_fun" id="optimize_fun.objective_fun">objective_fun</a></big>
<br>
The syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>optimize_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>.objective_fun(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets <small>@(@
y = f(x)
@)@</small> where

<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is a numpy vector with length 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
 is a scalar.

<br>
<br>
<big><a name="optimize_fun.objective_grad" id="optimize_fun.objective_grad">objective_grad</a></big>
<br>
The syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>z</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>optimize_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>.objective_grad(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets <small>@(@
z = f^{(1)} (x)
@)@</small> where

<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 and 
<code><i><font color="black"><span style='white-space: nowrap'>z</span></font></i></code>
 are numpy vectors with length 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
.

<br>
<br>
<big><a name="optimize_fun.objective_hess" id="optimize_fun.objective_hess">objective_hess</a></big>
<br>
The syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>h</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>optimize_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>.objective_hess(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets <small>@(@
h = f^{(2)} (x)
@)@</small> where

<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is a numpy vector with length 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>h</span></font></i></code>
 is a numpy 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 by 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
  matrix.

<br>
<br>
<big><a name="optimize_fun.constraint_fun" id="optimize_fun.constraint_fun">constraint_fun</a></big>
<br>
The syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>y</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>optimize_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>.constraint_fun(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets <small>@(@
y = g(x)
@)@</small> where

<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>y</span></font></i></code>
) is a numpy vector with length

<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 (
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
).

<br>
<br>
<big><a name="optimize_fun.constraint_jac" id="optimize_fun.constraint_jac">constraint_jac</a></big>
<br>
The syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>J</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>optimize_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>.constraint_jac(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets <small>@(@
J = g^{(1)} (x)
@)@</small> where

<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is a numpy vector with length 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>J</span></font></i></code>
 is a numpy 
<code><i><font color="black"><span style='white-space: nowrap'>m</span></font></i></code>
 by 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
  matrix.

<br>
<br>
<big><a name="optimize_fun.constraint_hess" id="optimize_fun.constraint_hess">constraint_hess</a></big>
<br>
The syntax

<code><font color="blue"><span style='white-space: nowrap'><br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>H</span></font></i><font color="blue"><span style='white-space: nowrap'>&nbsp;=&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>optimize_fun</span></font></i><font color="blue"><span style='white-space: nowrap'>.constraint_hess(</span></font><i><font color="black"><span style='white-space: nowrap'>x</span></font></i><font color="blue"><span style='white-space: nowrap'>,&nbsp;</span></font><i><font color="black"><span style='white-space: nowrap'>v</span></font></i><font color="blue"><span style='white-space: nowrap'>)<br>
</span></font></code>
sets
<small>@[@

	H = \sum_{i=0}^{m-1} v_k g_i^{(2)} (x)

@]@</small>
where 
<code><i><font color="black"><span style='white-space: nowrap'>x</span></font></i></code>
 is a numpy vector with length 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>

and 
<code><i><font color="black"><span style='white-space: nowrap'>H</span></font></i></code>
 is a numpy 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
 by 
<code><i><font color="black"><span style='white-space: nowrap'>n</span></font></i></code>
  matrix.


<br>
<br>
<b><big><a name="Example" id="Example">Example</a></big></b>

<br>
<a href="numeric_optimize_fun_xam.py.htm" target="_top"><span style='white-space: nowrap'>numeric_optimize_fun_xam.py</span></a>


<br>
<br>
<b><big><a name="Source Code" id="Source Code">Source Code</a></big></b>

<pre><tt>
<b><font color="#000080">import</font></b> numpy
<b><font color="#000080">import</font></b> cppad_py

<b><font color="#0000FF">class</font></b> optimize_fun_class <font color="#990000">:</font>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">__init__</font></b><font color="#990000">(</font>self<font color="#990000">,</font> objective_ad<font color="#990000">,</font> constraint_ad<font color="#990000">=</font>None<font color="#990000">)</font> <font color="#990000">:</font>
          self<font color="#990000">.</font>objective_ad  <font color="#990000">=</font> objective_ad
          self<font color="#990000">.</font>constraint_ad <font color="#990000">=</font> constraint_ad
     <i><font color="#9A1900">#</font></i>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">objective_fun</font></b><font color="#990000">(</font>self<font color="#990000">,</font> x<font color="#990000">)</font> <font color="#990000">:</font>
          <i><font color="#9A1900"># objective as a vector</font></i>
          y <font color="#990000">=</font> self<font color="#990000">.</font>objective_ad<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">)</font>
          <b><font color="#0000FF">return</font></b> y<font color="#990000">[</font><font color="#993399">0</font><font color="#990000">]</font>
     <i><font color="#9A1900">#</font></i>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">objective_grad</font></b><font color="#990000">(</font>self<font color="#990000">,</font> x<font color="#990000">)</font> <font color="#990000">:</font>
          <i><font color="#9A1900"># Jacobian as a matrix</font></i>
          J <font color="#990000">=</font> self<font color="#990000">.</font>objective_ad<font color="#990000">.</font><b><font color="#000000">jacobian</font></b><font color="#990000">(</font>x<font color="#990000">)</font>
          <i><font color="#9A1900"># change to a vector</font></i>
          <b><font color="#0000FF">return</font></b> J<font color="#990000">.</font><b><font color="#000000">flatten</font></b><font color="#990000">()</font>
     <i><font color="#9A1900">#</font></i>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">objective_hess</font></b><font color="#990000">(</font>self<font color="#990000">,</font> x<font color="#990000">)</font> <font color="#990000">:</font>
          w <font color="#990000">=</font> numpy<font color="#990000">.</font><b><font color="#000000">array</font></b><font color="#990000">(</font> <font color="#990000">[</font> <font color="#993399">1.0</font> <font color="#990000">]</font> <font color="#990000">)</font>
          H <font color="#990000">=</font> self<font color="#990000">.</font>objective_ad<font color="#990000">.</font><b><font color="#000000">hessian</font></b><font color="#990000">(</font>x<font color="#990000">,</font> w<font color="#990000">)</font>
          <b><font color="#0000FF">return</font></b> H
     <i><font color="#9A1900">#</font></i>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">constraint_fun</font></b><font color="#990000">(</font>self<font color="#990000">,</font> x<font color="#990000">)</font> <font color="#990000">:</font>
          <b><font color="#0000FF">return</font></b> self<font color="#990000">.</font>constraint_ad<font color="#990000">.</font><b><font color="#000000">forward</font></b><font color="#990000">(</font><font color="#993399">0</font><font color="#990000">,</font> x<font color="#990000">)</font>
     <i><font color="#9A1900">#</font></i>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">constraint_jac</font></b><font color="#990000">(</font>self<font color="#990000">,</font> x<font color="#990000">)</font> <font color="#990000">:</font>
          <i><font color="#9A1900"># Jacobian as a matrix</font></i>
          J <font color="#990000">=</font> self<font color="#990000">.</font>constraint_ad<font color="#990000">.</font><b><font color="#000000">jacobian</font></b><font color="#990000">(</font>x<font color="#990000">)</font>
          <b><font color="#0000FF">return</font></b> J
     <i><font color="#9A1900">#</font></i>
     <b><font color="#0000FF">def</font></b> <b><font color="#000000">constraint_hess</font></b><font color="#990000">(</font>self<font color="#990000">,</font> x<font color="#990000">,</font> v<font color="#990000">)</font> <font color="#990000">:</font>
          H <font color="#990000">=</font> self<font color="#990000">.</font>constraint_ad<font color="#990000">.</font><b><font color="#000000">hessian</font></b><font color="#990000">(</font>x<font color="#990000">,</font> v<font color="#990000">)</font>
          <b><font color="#0000FF">return</font></b> H</tt></pre>

<hr>Input File: example/python/numeric/optimize_fun_class.py

</body>
</html>
